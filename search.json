[{"title":"test","url":"/2020/06/24/test/","content":"\n## a\n### aaa\n### aaa\n#### aaaa"},{"title":"主题预览","url":"/2019/05/04/2015-01-01-主题预览/","content":"\n# 标题\n# 这里是 h1\n\n## 这里是 h2\n\n### 这里是 h3\n\n#### 这里是 h4\n\n##### 这里是 h5\n\n###### 这里是 h6\n\n```\n# 这里是 h1\n## 这里是 h2\n### 这里是 h3\n#### 这里是 h4\n##### 这里是 h5\n###### 这里是 h6\n```\n\n## 段落\n\n段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落\n\n段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落\n\n## 超链接\n\n[baidu](https://www.baidu.com/)\n\n```\n[baidu](https://www.baidu.com/)\n```\n\n## 引用\n### 单行\n> 这里是引用\n\n```\n> 这里是引用\n```\n\n### 嵌套\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n```md\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n```\n\n## Emphasis\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n```\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n```\n\n## 列表\n\n### 无序列表\n\n+ aaa\n- bbb\n- ccc\n  * ddd\n  - eee\n    - fff\n  * ggg\n- aaa\n\n```md\n+ aaa\n- bbb\n- ccc\n  * ddd\n  - eee\n    - fff\n  * ggg\n- aaa\n```\n\n\n### 有序列表\n\n1. aaa\n2. bbb\n3. ccc\n   1. aaa\n   2. bbb\n      1. ccc\n   3. ccc\n4. ddd\n\n```md\n1. aaa\n2. bbb\n3. ccc\n   1. aaa\n   2. bbb\n      1. ccc\n   3. ccc\n4. ddd\n```\n\n## 分割线\n\n---\n\n***\n___\n\n```md\n---\n\n***\n\n___\n```\n\n## 图片\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png)\n\n```md\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png)\n```\n\n## 代码行\n\n这是一段文字`rm -rf /*`这是一段文字\n\n```\n这是一段文字`rm -rf /*`这是一段文字\n```\n\n## 代码块\n\n\n```javascript\nvar addLoadEvent = function (func) {\n  var oldonload = window.onload\n  if (typeof window.onload != 'function') {\n    window.onload = func\n  } else {\n    window.onload = function () {\n      oldonload()\n      func()\n    }\n  }\n}\n```\n\n\n## 表格测试\n\n| Header | Header | Header |\n| ------ | ------ | ------ |\n| aaa    | bb     | ccc    |\n| test   | hello  | hi     |\n\n```md\n| Header | Header | Header |\n| ------ | ------ | ------ |\n| aaa    | bb     | ccc    |\n| test   | hello  | hi     |\n```\n\n## Markdown-it Plugins\n\n### Task List\n- [ ] Mercury\n- [x] Venus\n- [ ] Comet Haley\n\n```md\n- [ ] Mercury\n- [x] Venus\n- [ ] Comet Haley\n```\n\n### Emoji\n:frowning: :blush: :confused:\n\n```md\n:frowning: :blush: :confused:\n```\n\n使用方法\n1. 在 [EmojiCopy](https://www.emojicopy.com/) 中复制粘贴\n2. [Emoji Cheetsheet](https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/full.json)\n3. [Emoji Shortcut](https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/shortcuts.js)\n\n### 上标和下标\n19^th^\n\nH~2~O\n\n```md\n19^th^\nH~2~O\n```\n\n### Image Size\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png =100x100)\n\n```md\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png =100x100)\n```\n\n### Attributes\n给这个段落添加一个 class {.red}\n<style>.red{color: red;}</style>\n\n这个段落添加一个属性 {style=\"color:green\"}\n\n```md\n给这个段落添加一个 class {.red}\n<style>.red{color: red;}</style>\n\n这个段落添加一个属性 {style=\"color:green\"}\n```\n\n### Footnotes\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n```md\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n```\n\n### 缩写\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n```md\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n```\n\n### Mark\n==mark==\n\n```md\n==mark==\n```\n\n### Container\n::: info\n**INFO**\nhere be info\n:::\n\n::: success\n**SUCCESS**\nhere be success\n:::\n\n::: warning\n**WARNING**\nhere be warning\n:::\n\n::: danger\n**DANGER**\nhere be danger\n:::\n\n```md\n::: info\n**INFO**\nhere be info\n:::\n\n::: success\n**SUCCESS**\nhere be success\n:::\n\n::: warning\n**WARNING**\nhere be warning\n:::\n\n::: danger\n**DANGER**\nhere be danger\n:::\n```\n\n## 数学公式\n### 行内公式\n$\\frac{\\partial u}{\\partial t}\n= h^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} +\n\\frac{\\partial^2 u}{\\partial y^2} +\n\\frac{\\partial^2 u}{\\partial z^2}\\right)$\n\n```md\n$\\frac{\\partial u}{\\partial t}\n= h^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} +\n\\frac{\\partial^2 u}{\\partial y^2} +\n\\frac{\\partial^2 u}{\\partial z^2}\\right)$\n```\n\n### 行间公式\n$$\n\\\\begin{aligned}\nx\\_{f} = & x\\_0+k(x-x\\_0) \\\\\\\\\ny\\_{f} = & y\\_0+k(y-y\\_0) \\\\\\\\\ns\\_{f} = & k\n\\\\end{aligned}\n$$\n\n```md\n\\\\begin{aligned}\nx\\_{f} = & x\\_0+k(x-x\\_0) \\\\\\\\\ny\\_{f} = & y\\_0+k(y-y\\_0) \\\\\\\\\ns\\_{f} = & k\n\\\\end{aligned}\n```\n\n## 插入 iframe\n<iframe src=\"//player.bilibili.com/player.html?aid=285774045&bvid=BV1uf4y127Ab&cid=196316963&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 插入 html\n\n<div id=\"html\"></div>\n<style>\n#html{\n    height: 30px;\n    background: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(0,255,0,1) 50%, rgba(0,0,255,1) 100%);\n    border-radius: 4px;\n}\n</style>\n\n```html\n<div id=\"html\"></div>\n<style>\n#html{\n    height: 30px;\n    background: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(0,255,0,1) 50%, rgba(0,0,255,1) 100%);\n    border-radius: 4px;\n}\n</style>\n```\n","tags":["hexo"]},{"title":"翻译 express-session 使用文档","url":"/2019/04/04/express-session-translate/","content":"> [文档原网址](https://www.npmjs.com/package/express-session)  \n\n以下翻译正文\n\n## Installation\n这是一个通过 [npm registry](https://www.npmjs.com/) 可用的 [Node.js](https://nodejs.org/en/) 模块。使用以下 `npm install` 命令来完成安装。\n```sh\n$ npm install express-session\n```\n## API\n\n```javascript\nvar session = require('express-session');\n```\n\n### sessions(options)\n使用给定选项创建一个 session 中间件。  \n**注意**：只有 session ID 是保存在 cookie 中，Session 数据本身并不是。Session 数据是存在服务端。  \n**注意**：从版本 1.5.0 起，本模块不再需要 [cookie-parser](https://www.npmjs.com/package/cookie-parser) 中间件来运行。本模块现在直接在 req/res 上读写 cookies。当本模块和 cookie-parser 的 `secret` 不一致时，使用 cookie-parser 可能会导致问题。  \n**警告**：默认的服务端 session 存储，MemoryStore，**特意**没有为生产环境而设计。在大多数情况下，它可能会导致内存泄漏，不会扩展过单个进程，而且是用于调试和开发。  \n对于存储列表，请查看[兼容的 session 存储](#compatible-session-stores)\n#### Options\nexpress-session 在 options 对象中接收以下参数：\n##### cookie\nsession ID cookie 的设置对象。默认值为 `{ path: '/', httpOnly: true, secure: false, maxAge: null }`.\n\n下列参数可选设置放入 cookie 对象。\n\n###### cookie.domain\n\n为 Set-Cookie 属性指定 domain。默认情况下，没有设置 domain，并且大多数客户端会将 cookie 视为仅应用于当前 domain。\n\n###### cookie.expires\n\n为 Set-Cookie 属性中的 Expires 指定 Date 对象。默认情况下，没有设置 expires，大多数客户端会将视这个为 \"非持久化 cookie\" 并且在像退出浏览器应用的场景下删除该 cookie。  \n**注意**：如果 options 对象中同时设置了 expires 和 maxAge，那么将被用到的是在对象中最后一个被定义的属性。  \n**注意**：expires 选项不应该被直接设置；而应该只使用 maxAge 选项。\n\n###### cookie.httpOnly\n\n为 Set-Cookie 属性中的 HttpOnly 指定 boolean 值。当为真值，HttpOnly 属性被设置，否则不被设置。默认情况下，HttpOnly 属性是被设置的。  \n**注意**：设置该值为 true 的时候要小心，因为服从协议的客户端不会允许 JavaScript 在 document.cookie 中查看 cookie。\n\n###### cookie.maxAge\n\n指定当计算 Set-Cookie 属性中的 Expires 时使用的 number （毫秒）值。这是通过获取当前服务器时间并将 maxAge 毫秒数加入其中计算 Expires 日期时间来完成的。默认情况下没有设置 maxAge。  \n**注意**：如果 options 对象中同时设置了 expires 和 maxAge，那么将被用到的是在对象中最后一个被定义的属性。\n\n###### cookie.path\n\n为 Set-Cookie 属性指定 Path 值。默认情况下该值被设为 `'/'`，也就是 domain 下的根路径。\n\n###### cookie.sameSite\n\n为 Set-Cookie 属性中的 SameSite 指定 boolean 或者 string 值。其中，\n\n* `true` 会将 SameSite 属性设为 Strict 以实现严格的相同站点强制。\n* `false` 不会 SameSite 属性。\n* `'lax'` 会将 SameSite 属性设置为 Lax 以实现宽松的相同站点强制。\n* `'strict'` 会将 SameSite 属性设置为 Strict 以实现严格的相同站点强制。\n\n关于不同的强制级别的更多信息可以在细则中找到<https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1>  \n**注意**：这是一个还未被完全标准化的属性并且将来可能发生变化。这意味着许多客户端可能忽略这条属性直到它们完全理解它为止。\n\n###### cookie.secure\n\n为 Set-Cookie 属性中的 Secure 指定 boolean 值。当为真时，Secure 属性被设置否则没有设置。默认情况下 Secure 属性没有被设置。  \n**注意**：当设置该值为 true 的时候请小心，因为如果浏览器没有建立 HTTPS 连接服从协议的客户端将不会发送 cookie 返回给服务端。  \n请注意 secure: true 是推荐选项。然而，它需要启用 HTTPS 的网站， 也就是 HTTPS  是 secure cookies 所必须的。如果 secure 被设置而你通过 HTTP 访问你的站点，cookie 将不会被设置。如果你在代理后使用 node.js 并且设置 secure: true，你需要在 express 中设置 \"trust proxy\"：\n\n```javascript\nvar app = express()\napp.set('trust proxy', 1) // trust first proxy\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}))\n```\n\n为了在生产环境中使用 secure cookies，同时允许在开发环境中测试，下列是在 express 中基于 `NODE_ENV` 启用此设置的示例：\n\n```javascript\nvar app = express()\nvar sess = {\n  secret: 'keyboard cat',\n  cookie: {}\n}\n \nif (app.get('env') === 'production') {\n  app.set('trust proxy', 1) // trust first proxy\n  sess.cookie.secure = true // serve secure cookies\n}\n \napp.use(session(sess))\n```\n\ncookie.secure 选项也可以被设置成特殊值 \"auto\" 来让这个设置自动和确定的连接的安全性相匹配。如果站点可以同时用做 HTTP 和 HTTPS 请小心使用这个设置，因为一旦 cookie 的 HTTPS 属性被设置，cookie 不会再对 HTTP 可见。当 Express 的 \"trust proxy\" 被正确设置来简化开发和生产配置的时候，这非常有用。\n\n##### genid\n\n调用来生成一个新的 session ID 的函数。提供一个返回 string 类型并将被用来作为 session ID 的函数。当生成 ID 的时候如果你想用一些附加到 req 的值，该函数已给定 req 作为第一个参数。  \n默认值是一个使用 `uid-safe` 库来生成 ID 的函数。  \n**注意**：请小心生成唯一的 ID 以便你的 sessions 不会产生冲突。\n\n```javascript\napp.use(session({\n  genid: function(req) {\n    return genuuid() // use UUIDs for session IDs\n  },\n  secret: 'keyboard cat'\n}))\n```\n\n##### name\n\n设置在 response 中（和从 request 中读取）的 session ID 的 cookie 的 name。  \n默认值为 `\"connect.sid\"`。  \n**注意**：如果你有多个运行在相同 hostname（只是名字，也就是 localhost 或者 127.0.0.1；不同的协议(scheme) 和 端口(port) 不命名不同的主机名）上的应用，那么你需要将 session cookie 彼此分开。最简单的方法是每个应用设置不同的 name。\n\n##### proxy\n\n当设置 secure cookies 的时候相信反向代理（通过 `\"X-Forwarded-Proto\"` 头）。  \n默认值为 `undefined`。  \n* `true` 表示 `\"X-Forwarded-Proto\"` 头将会被使用。\n* `false` 表示只有存在直接的 TLS/SSL 连接时才会忽略所有头并认为连接是安全的。\n* `undefined` 表示从 express 中使用 \"trust proxy\"。\n\n##### resave\n\n及时回话在请求期间从未被修改过也强制 session 保存回 session 存储。根据你的存储这可能是必须的，但是这也可能创造竞争条件当客户端发送两个并行请求到你的服务端并且其中一个请求A 对 session 作出的更改可能会在另一个请求 B 结束时被覆盖即使请求 B 没有做任何更改（这个行为取决于你用的 session 存储）。  \n默认值为 true，但是不推荐使用默认值，因为默认值将来会被更改。请研究此项设置并选择适合你的用例的选项。一般来讲，你会想选择 false。  \n我怎么知道该设置对我的 session 存储来讲是不是必须的呢？最好的方法是检查你的存储看它是否实现了 touch 方法。如果它实现了，那你可以安全地设置 resave 为 false。如果它没有实现 touch 方法而且你的 store 在存储的 sessions 中设定的 expiration 日期，那么你可能需要设置 resave: false。\n\n##### rolling\n\n强制在每次响应的时候设置一个 session 标志符 cookie。expiration 重新被设置为初始的 maxAge，重置 expiration 倒计时。  \n默认值为 false。  \n**注意**：当该选项被设置为 true 但是 saveUninitialized 选项被设置为 false，则不会在具有未初始化的 session 响应中设置 cookie。\n\n##### saveUninitialized\n\n强制将未初始化的 session 保存回 store。当一个 session 是新的但是还未被修改时我们说他是未初始化的。选择 false 值对实现登录 session 是有用的，因为它减少了服务器存储的用量，遵守了设置 cookie 前需要许可的规则。选择 false 值也有助于客户端在没有回话的情况下发出过个并行请求的竞争条件。  \n默认值为 true，但是不推荐使用默认值，因为默认值将来会被更改。请研究此项设置并选择适合你的用例的选项。  \n**注意**：如果你正在结合 PassportJS 使用 Session，用户通过身份验证后PassportJS 将为该用户在 session 中添加一个空的 Passport 对象，这将会视为对 session 的修改，导致 session 被保存。*这已经在 PassportJS 0.3.0 中被修复。*\n\n##### secret\n\n**必设选项**  \n这是用来给 session ID cookie 签名的 secret。这可以是单个 secret 的字符串也可以是多个 secret 组成的数组。如果提供了一组 secrets，只有第一个元素会被用来给 session ID cookie 签名，在验证请求签名的时候才会考虑到所有元素。\n\n##### store\n\nsession 存储实例，默认为一个新的 MemoryStore 实例。\n\n##### unset\n\n控制取消设置 req.session 的结果（通过删除，设为 null，等等）。  \n默认值为 **'keep'**  \n* `'destroy'` 表示当响应结束的时候 session 将会被销毁（删除）。\n* `'keep'` 表示在 store 中的 session 会被保留，但是在请求期间做的修改将会被忽略不会被保存。\n\n### req.session\n\n存储或者访问 session 数据，只需要使用请求属性 req.session，该属性（通常）由 store 序列化为 session，所以一般来说嵌套对象也可以接受。下面的示例是一个基于特定用户的视图计数器：\n\n```javascript\n// Use the session middleware\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))\n \n// Access the session as req.session\napp.get('/', function(req, res, next) {\n  if (req.session.views) {\n    req.session.views++\n    res.setHeader('Content-Type', 'text/html')\n    res.write('<p>views: ' + req.session.views + '</p>')\n    res.write('<p>expires in: ' + (req.session.cookie.maxAge / 1000) + 's</p>')\n    res.end()\n  } else {\n    req.session.views = 1\n    res.end('welcome to the session demo. refresh!')\n  }\n})\n```\n\n#### Session.regenerate(callback)\n\n要重新生成 session 只需要调用这个方法。完成后一个新的 SID 和 Session 实例将会被初始化在 req.session 并且 callback 会被调用。\n\n```javascript\nreq.session.regenerate(function(err) {\n  // will have a new session here\n})\n```\n\n#### Session.destroy(callback)  \n销毁 Session 并取消设置 req.session 属性。完成后将调用 callback。  \n```javascript\nreq.session.destroy(function(err) {\n  // cannot access session here\n})\n```\n\n#### Session.reload(callback)\n\n从 store 重新载入 session 数据并重新填充 req.session 对象。完成后将调用 callback。\n\n```javascript\nreq.session.reload(function(err) {\n  // session updated\n})\n```\n\n#### Session.save(callback)\n\n将 session 保存回 store，用内存中的内容替换 store 中的内容（尽管 store 可能还会做其他的事情—参阅 store 的文档以了解其确切的行为）。  \n如果 session 数据被改变了这个方法会在 HTTP 响应的末尾自动被调用（尽管这个行为可以被中间件构造器中的多种选项所改变）。因此，一般来讲这个方法不需要被手动调用。  \n存在一些调用这个方法会很有用的情况，比如重定向，长期请求（long-lived requests）或着 WebSockets。\n\n```javascript\nreq.session.save(function(err) {\n  // session saved\n})\n```\n\n#### Session.touch(callback)\n\n更新 .maxAge 属性。一般来讲这个方法不需要被调用因为 session 中间件为你执行了这个操作。\n\n### req.session.id\n\n每一个 session 都有一个与之关联的唯一 ID。该属性是 req.sessionID 的别名而且无法修改。该属性已被添加以使 session ID 可以从 session 对象中访问。\n\n### req.session.cookie\n\n每一个 session 都有一个唯一的 cookie 与之伴随。这允许你更改每个访问者的 session cookie。例如我们可以设置 req.session.cookie.expires 为 false 来使 cookie 仅在用户-代理的持续时间中保留。\n\n#### Cookie.maxAge\n\nreq.session.cookie.maxAge 将以毫秒数返回剩余的时间，我们也可以重新分配一个新值来适当地调整 .expires 属性。以下代码是等效的：\n\n```javascript\nvar hour = 3600000\nreq.session.cookie.expires = new Date(Date.now() + hour)\nreq.session.cookie.maxAge = hour\n```\n\n例如当 maxAge 被设置为 60000（一分钟）时，三十秒后它将返回 30000 知道当前的请求已完成，此时调用 req.session.touch() 将会重设 req.session.maxAge 为它的初始值。\n\n```javascript\nreq.session.cookie.maxAge // => 30000\n```\n\n### req.sessionID\n\n要拿到载入的 session 的 ID，访问请求的属性 req.sessionID。当 session 被载入或被创建的时候这仅是一个只读的值。\n\n## Session Store Implementation\n\n每一个 session store 必须是一个 EventEmitter 并且实现特定的方法。下列的方法是必需，推荐和可选的列表。\n\n* 必需的方法是此模块将会始终在 store 中调用的方法。\n* 推荐的方法是如果可用此模块将会在 store 中调用的方法。\n* 可选的方法是此模块根本不会调用的方法\n\n有关示例实现请查看 [connect-redis](http://github.com/visionmedia/connect-redis) 仓库。\n\n### store.all(callback)\n\n**可选**  \n该可选方法用于以数组形式获取 store 中的所有 session。回调方法应该使用为 `callback(error, sessions)`。\n\n### store.destroy(sid, callback)\n\n**必需**  \n该必需方法根据给定的 session ID 来销毁（删除）store 中的 session。session被删除后回调函数应该使用为 `callback(error)`。\n\n### store.clear(callback)\n\n**可选**  \n该可选方法用于删除 store 中的所有 session。store 清空后回调函数应该使用为 `callback(error)`。\n\n### store.length(callback)\n\n**可选**  \n该可选方法用于获取 store 中所有 session 的个数。回调函数应该使用为 `callback(error, len)`。\n\n### store.get(sid, callback)\n\n**必需**  \n该必需方法根据给定的 session ID 从 store 中获取 session。回调函数应该使用为 `callback(error, session)`。  \n如果找到 session 回调函数中的 session 参数应该为一个 session 对象，否则如果没有找到 session（并且也没有错误）应该为 null 或 undefined。当 `error.code === 'ENOENT'` 表现为 `callback(null, null)` ，这是一种特殊情况。\n\n### store.set(sid, session, callback)\n\n**必需**  \n该必需方法根据给定的 session ID 和 session 对象将 session 存入 store。session 存入 store 后回调函数应该使用为 `callback(error)`。\n\n### store.touch(sid, session, callback)\n\n**推荐**  \n该推荐方法根据给定的 session ID 和 session 对象 \"触碰\" 给定的 session 对象。session 被 \"触碰\" 后回调函数应该使用为 `callback(error)`。  \n该方法主要用于 store 自动删除空闲 session，并将此方法用于向 store 发送给定 session 处于活动状态的信号，可能回重置空闲计时器。  \n## Compatible Session Stores\n\n下列的模块是实现了一个和本模块兼容的 session store。请提出 PULL REQUEST 来添加其他的模块 :)  \n本处仅列出两处 store 实现，更多请查看[原文档](https://www.npmjs.com/package/express-session#compatible-session-stores)  \n[`connect-db2`](https://www.npmjs.com/package/connect-db2): 一个使用 ibm_db 模块建成的基于 IBM DB2 的 session store。  \n[`connect-mongo`](https://www.npmjs.com/package/connect-mongo): 一个基于 SQL Server 的 session store。\n\n## Example\n\n一个简单使用 express-session 来为用户存储页面访问的例子：\n\n```javascript\nvar express = require('express')\nvar parseurl = require('parseurl')\nvar session = require('express-session')\n \nvar app = express()\n \napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true\n}))\n \napp.use(function (req, res, next) {\n  if (!req.session.views) {\n    req.session.views = {}\n  }\n \n  // get the url pathname\n  var pathname = parseurl(req).pathname\n \n  // count the views\n  req.session.views[pathname] = (req.session.views[pathname] || 0) + 1\n \n  next()\n})\n \napp.get('/foo', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/foo'] + ' times')\n})\n \napp.get('/bar', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/bar'] + ' times')\n})\n```\n\n## License\n\n[MIT](https://github.com/expressjs/session/blob/HEAD/LICENSE)\n\n## Keywords\n\nnone","tags":["express-session"]},{"title":"集智课堂之 Python 学习","url":"/2018/02/14/jizhi-python-learning/","content":"\n这是在集智课堂学习[深度学习所需的 Python 基础](https://jizhi.im/course/dl_python)课程笔记。  \n## 基本概念\n### hello world\n\n```python\nprint(\"hello world\")\n```\n\n### Python\n解释型语言 --逐行运行。\n### 变量\n使用 `type()` 函数得到变量类型。  \n不同类型变量无法相加。  \n运行 `help()` 进入帮助模式，输入 `keywords` 得到关键字列表。  \n变量类型转换可以使用 `float()`, `int()`, `str()` 等函数。\n\n### 数值\nPython 支持的 3 种数值类型：`int`， `float`， `complex`（复数）。  \n指数运算符是 `**`，`^` 在 Python 中表示二进制按位运算。  \nPython 不支持一元加减操作（`++` 或 `--`）。\n### 布尔值\n和其他语言类似\n### 字符串\n可以用 `str()` 函数将其他类型变量转为字符串。  \n可以通过 字符串变量名[索引值] 的方法访问字符串中某个具体的字符。  \n`+` 号可以拼接两个字符串，`*` 号可以复制字符串。  \n可以通过 字符串变量名 `[start:end]` 对字符串进行切割，返回第 `start` 到 `end-1` 的字符，负数索引表示倒数，最后一个字符即是 `[-1]`。  \n`in` 和 `not in` 可以判断一个字符串是否包含另一个字符串，也叫成员运算符。  \n字符串常用函数：\n\n函数名 | 函数返回值\n:-: | :-\nlen() | 返回字符串长度\nmax() | 返回字符串 ASCII 最大的字符\nmin() | 返回字符串 ASCII 最小的字符\nord() | 返回字符对应的 ASCII 编码\nchr() | 返回 ASCII 编码所代表的字符\n## 进阶对象\n### 关系运算符\n`if` 语句\n```python\nif condition1:\n    # branch\nelif condition2:\n    # branch\nelse\n    # 什么也不做用 pass 填充\n```\n### 控制流-1\n`for` 循环\n```python\nfor i in iterable_object:\n    # loop body\n```\n`range()` 函数\n```python\nfor i in range(3):\n    # i -> 0, 1, 2\nfor i in range(2, 5):\n    # i -> 2, 3, 4  range(a,b)中，如果 a > b，则返回空数组\nfor i in range(0, 6, 2):\n    # i -> 0, 2, 4  第三个数是步长\n```\n`while` 循环\n```python\nwhile condition:\n    # loop body\n```\n### 控制流-2\n`break` 语句和 `continue` 语句\n### 列表\n通过 `,` 分隔，由 `[ ]` 包含。  \n列表的元素可以是不同类型，列表本身也可以作为元素。  \n创建列表可以通过：\n```python\nl = [ ]\nl = list()\nl = list(\"jizhi\") # l = ['j', 'i', 'z', 'h', 'i']\n```\n`len()` 函数可以获取列表元素个数。  \n列表的访问和切割与字符串类似，`[ ]` 内写索引值或 `start:end`。  \n`+` 用于拼接， `*` 复制列表内元素。  \n常用列表方法如下\n\n|       方法       | 输入值类型 | 返回值类型 |                   描述                    |\n| :--------------: | :--------: | :--------: | :---------------------------------------: |\n|    append(x)     |   object   |    None    |  在 list 的最后添加一个元素，没有返回值   |\n|     count(x)     |   object   |    int     | 返回元素 x 在 list 中出现的次数，返回整数 |\n|    extend(l)     |    list    |    None    |       将列表 l 中的元素全部 append        |\n|     index(x)     |   object   |    int     |     返回列表中出现的第一个 x 的索引值     |\n| insert(index, x) |    int     |    None    |        将元素 x 插入到指定索引位置        |\n|    remove(x)     |   object   |    None    |      从列表中提出第一个出现的元素 x       |\n|    reverse()     |    None    |    None    |               倒转列表元素                |\n|      sort()      |    None    |    None    |               正序排列元素                |\n|    sorted(l)     |    list    |    list    |          对列表 l 临时排序并返回          |\n|      pop(i)      |    int     |   object   |         删除并返回指定位置的元素          |\n\n列表推导式\n\n```python\nl1 = [x for x in range(10)]\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# 创建0-9的列表\nl2 = [x + 1 for x in range(10)]\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# 创建1-10的列表\nl3 = [x for x in range(10) if x % 2 ==0]\n# [0, 2, 4, 6, 8]\n# 10以内偶数列表\n```\n### 字典\n字典也即是 Python 中的键值对。  \n添加或修改字典中元素直接用 `=` 给目标复制即可。  \n删除某个键值对直接用 `del` ，后面空格接对应的键就可以。  \n`del heros[\"superman\"]`  \n字典循环\n```python\nfor key in heros:\n    # loop body\n```\n字典常用方法\n\n方法 | 描述\n:-: | :-:\npopitem() | 返回并删除一个随机元素\nclear() | 删除字典内所有元素\nkeys() | 返回字典的所有键\nvalues() | 返回字典的所有值\nget(key) | 返回键对应的值，不存在则返回 None\npop(key) | 翻出并返回键对应值\n### 元组\n元组和列表相近，但是元组使用圆括号`( )`而不是方括号`[ ]`来标志，**元组一旦创建，就不能再添加、删除或修改其中的元素，元组是不可修改的**，这一点和字符串性质相同  \n#### 创建元组\n```python\n# 创建空元组\nt1 = ()\n# 直接创建元组\nt2 = (1, 2, 3, 4)\n# 从数组创建\nt3 = tuple([1, 2, 3, 4])     # (1, 2, 3, 4)\n# 从字符串创建\nt4 = tuple(\"谈笑风生\")        # ('谈', '笑', '风', '生')\n```\n元组关键字是 `,` 而不是 `()`。\n### 变性不变性\n列表是 `可变的(mutable)`，我们删改其中的元素，该列表在内存中的地址还是一样的。  \n字符串是`不可变的(immutable)`，修改后产生新字符串后旧字符串失去引用则被内存回收。\n```python\n# 创建变量 str1，指向值 \"jizhi\"\nstr1 = \"jizhi\"\nprint(id(str1))\n\n# 尝试改变 str1，但其实并没有改变值 \"jizhi\"\nstr1 += \".im\"\n\n# str1 只是指向了另一个值 \"jizhi.im\"\nprint(id(str1))\n```\n## 面向对象\n### 文件\n对文件的基本操作\n```python\nopen(\"test.txt\", \"r\")\n# 第一个参数是目标文件名，第二个参数 r 代表只读， w 代表写入， a 代表增补\n\nf = open(\"test.txt\", \"r\")\n# f 变量并不是文本内容，类型为 TextIOWrapper，内容包含文件名(name)，打开方式(mode)和编码格式(encoding)三个参数\n\nnovel = f.read()\n# f 是 TextIOWrapper对象，需要 read()方法才能得到文件内容,read() 函数的返回值是字符串类型的值\n```\n### 函数\n定义函数\n```python\ndef function(argument):\n    # function body\n    value = 1\n    return value\n```\n### 类和对象\n定义类\n```python\nclass Creature (object): # 括号内是超类\n    # statements\n    pass # 表示这个类什么也不做\n```\n实例变量：使用构造器\n```python\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\ngreenlihui = Person(\"greenlihui\")\ngreenlihui.getName() # print 这行语句会得到 greenlihui\n```\nPython 所有方法第一个参数都是 `self`，该参数指代调用该方法的对象；调用方法时，不需要传入 `self` 参数，Python 解释器会自动完成这一步。\n### 类和对象-2\n#### 隐藏实例变量  \n在前面的程序中，Person 被实例化并赋予名字后，其对象的名字依然可以 通过 `object.name = \"\"` 被修改，但是我们不希望可以这样，所以需要隐藏这些实例变量，即定义 `私有实例变量`。在 Python 中，以两条下划线 `__` 开头的变量就是私有实例变量，方法同样可以定义为私有，也是两条下划线开头。  \n还有一种情况是变量名前面有单下划线 `_`，这种叫做 `保护变量`，只有类及其子类可以访问。  \n构造器方法 `__init__()` 前后都有 `__` ，这种前后都有双下划线的写法，是 Python 内置特殊方法的标志，我们命名方法时应避免这种情况。\n#### 运算符重载  \n我们可以用 `+` 进行数学运算，也可以进行字符串拼接，在这两种情形中 `+` 完全是不同的含义。因为 `+` 运算符在 `int` 类和 `str` 类中分别进行了重载。如果想在自定义的对象中使用 `+`，则需要定义名为 `__add__` 的方法。  \n在下面的例子中，定义类几何图形 圆 的类，重载了运算符`+`，我们可以使用 `+` 使两个圆半径相加求出和。\n```python\nimport math\nclass Circle:\n    def __init__(self, radius):\n        self.__radius = radius\n    \n    def setRadius(self, radius):\n        self.__radius = radius\n    \n    def getRadius(self, radius):\n        return self.__radius\n\n    def area(self):\n        return math.pi * self.__radius ** 2\n    \n    def __add__(self, another_circle):\n        return Circle(self.__radius + another_circle.__radius)\n\nc1 = Circle(4)\nc2 = Circle(5)\nc3 = c1 + c2 # 此时，c3 是半径为 9 的圆对象\n```\nPython 还提供很多其他的运算符可供重载，如下：\n\n运算符 | 函数 | 描述\n| :-: | :-: | :-: |\n| + | add(self, other) | 加法 |\n| - | sub(self, other) | 减法 |\n| * | mul(self, other) | 乘法 |\n| / | truediv(self, other) | 除法 |\n| % | mod(self, other) | 余数 |\n| < | lt(self, other) | 小于 |\n| <= | le(self, other) | 小于等于 |\n| == | eq(self, other) | 等于 |\n| != | ne(self, other) | 不等于 |\n| > | gt(self, other) | 大于 |\n| >= | ge(self, other) | 大于等于 |\n| [index] | getitem(self, index) | 索引 |\n| in | contains | 从属 |\n| len | len(self) | 元素个数 |\n| str | str(len) | 字符表征 |\n\n**重载函数前后要加双下划线**\n### 继承与派生\n#### 创建子类\n\n```python\nclass sub_class(super_class):\n    # 实例变量\n    # 实例方法\n```\n\n继承基本思想不做过多阐述，与 `C#`，`Java` 这些语言不同，Python 允许多重继承。\n\n```python\nclass Subclass(SuperClass1, SuperClass2, ...):\n    # initializer\n    # methods\n```\n## 花式操作\n### 用户输入\n```python\nmessage = input(\"Tell me something, and I will repeat it back to you: \")\n# 上面这行语句会输出括号内的提示字符串，然后等待用户输入赋值给 message 变量\nprint(message)\n```\n类似地，使用函数 `int()` 可以获取数值输入。（括号内同样可以把提示作为参数）\n### Lambda 函数\n`Lambda` 函数很简单，只能包含一个表达式，表达式的结果就是 `Lambda` 函数的值，不需要单独设定 `return` 关键字。  \n```python\n# 乘法的普通函数实现方式\ndef multiply(x, y):\n    return x * y\n\n# 用 Lambda 实现方式\nmul = lambda x, y : x * y\nmul(111, 6) # 和 multiply(111, 6) 运行结果一致\n```\n### 函数的参数\n#### 默认参数  \n对于方法头 `def sum(a, b, c=0):`，如果调用函数时没有指定参数 `c`， 则自动代入默认值 `0`。\n#### 任意数量参数  \n`*args` 可以让函数接受任意数量的参数，和 `Java` `...args`参数类似，将若干个输入参数存入一个列表。\n```python\ndef sum(*args):\n    s = 0\n    for i in args:\n        s += i\n    print(\"Sum is:\", s)\n\nprint(sum(1, 2, 3)) # 输出 Sum is: 6\nprint(sum(1, 2, 3, 4)) # 输出 Sum is: 10\n# args 不是强制命名，用 *my_args 也可以\n```\n#### 关键字参数\n`**kwargs` 和 `*args` 类似，区别在于前者接受的参数带有关键字，形式如 `my_func(name='greenlihui', age=20)`；**`kwargs`把参数存入一个字典，用键值对的形式表示特征字与参数的映射关系。**\n```python\ndef my_func(**kwargs):\n    for i in kwargs.items():\n        print(i)\n\nmy_func(name='greenlihui', age=20)\n# 输出如下\n# ('name', 'greenlihui')\n# ('age', 20)\n```\n### 生成器\n#### 迭代器  \n可以循环遍历的数据类型都是`可迭代的`，要判断一个对象是不是可迭代的，只要通过 `isinstance(object, Iterable)` 判断它是否是 `Iterable` 的实例(isinstance 返回 `true` 或者 `false`)。  \n可迭代不代表它是迭代器，迭代器的一大特点就是通过 `next()` 函数可以返回迭代器的下一个元素。或者如果没有下一个元素，则抛出 `StopIteration` 异常。\n```python\nheights = [1, 2, 3, 4]\nheights_iter = iter(heights)\n# 先通过 iter() 函数将列表转化成迭代器\n\nprint(next(heights_iter))\nprint(next(heights_iter))\nprint(next(heights_iter))\nprint(next(heights_iter))\n```\n#### 生成器  \n生成器是用于产生迭代器的函数，所以可用于 for 循环。生成器与函数的定义方法相似，唯一的区别就是用 `yield` 关键字来返回用于每次迭代的值。\n```python\ndef my_range(start, stop, step = 1):\n    i = start\n    while i < stop:\n        yield i\n        i += setp\n\nfor k in my_range(11, 45)\n    print(k)\n# 将会输出整数 11 ～ 44\n```\n### 模块\nPython 中的模块从形式上讲就是一个普通的 Python 文件，里面预存了写好的函数、变量、类和对象。\n#### 导入模块\n```python\n# 导入模块\nimport module_name as mn\nmn.function_name()\n# 导入模块特定函数\nfrom module_name import function_name\nfunction_name()\nfrom module_name import function_0, function_1, function_2\nfunction_0()\n# 导入模块所有函数\nfrom module_name import function_name as func\n```\n#### NumPy  \n`NumPy` 是一个用于数值计算的模块，现在已经和 `SciPy` 合并类。[官方网站](scipy.org) 和 [Quickstart Tutorial](https://docs.scipy.org/doc/numpy-dev/user/quickstart.html) 这里给出，数值计算在深度学习领域中占有重要地位。  \n`NumPy` 提供一种全新的数据结构 `ndarray` (N 维数组，也即高维张量)，与列表有相似之处但是 `ndarray` 内的元素必须是相同的数据类型而且 `ndarray` 的大小是固定的。\n```python\nimport numpy as np\n\n# 矢量相乘\nu = np.array([1, 1, 4])\nv = np.array([5, 1, 4])\na = np.dot(u, v)\n```\n### 正则表达式\nPython 内置正则表达式模块，导入 `import re` 即可使用。\n#### re.search()  \n`search()` 方法用于寻找字符串中第一个匹配模式的部分：\n```python\nimport re\nre.search(pattern, string, flags[optional])\n# 若匹配成功，返回 match 对象，否则返回 None。\n# match 对象拥有 group() 方法，可以输出匹配的字符。\n# pattern 必须是原始字符串(raw strings)，需要在前面加个 r；原始字符串中所有的特殊标识符都变回普通字符，比如 \\n 表示反斜杠 和 n\n```\n示例\n```python\nimport re\ns = \"my number is 123\"\nmatch = re.search(r'\\d\\d\\d', s)\n\nprint(match) # 输出该 <match> 对象\nprint(match.group()) # 输出123\n```\n正则表达式的基本模式：  \n\n符号 | 匹配\n\n| :-: | :-: |\n| . | 除开空白字符外的任意字符 |\n| \\w | 任意词汇字符，如字母数字和下划线 |\n| \\W | 非词汇字符 |\n| \\d | 单个数字 |\n| \\D | 非单个数字 |\n| \\s | 空白字符，如 \\n,\\t, space 等 |\n| \\S | 非空白字符 |\n| [abc] | 集合中的字符 |\n| [^abc] | 集合外的字符 |\n| [a-z] | 范围在 a-z 的字符 |\n| [a-zA-Z] | 范围在 a-z 或 A-Z 的字符 |\n| [0-9] | 范围在 0-9 之间的字符 |\n| ^ | 匹配字符串开头 |\n| $ | 匹配字符串结尾 |\n| + | 匹配前一个字符一次或多次 |\n| * | 匹配前一个字符零次或多次 |\n[这是一个关于 Python 正则表达式详细说明的博文](https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html)\n#### 捕获组(group capturing)  \n捕获组可以进一步从匹配字符串中提取出符合条件的特定部分，建立组的方法是括号 `( )`，假设我们想从电子邮件中提取出“姓名”和“域名”，则需要用`( )`把相应部分括起来。  \n[邮箱正则表达式推导过程](http://blog.csdn.net/make164492212/article/details/51656638)\n```python\nimport re\ns = \"my email is greenlihui@live.com\"\nmatch = re.search(r'[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+', s)\n\nif match:\n    print(match.group()) # 此时输出 greenlihui@live.com\nelse:\n    print(\"match not found\")\n\n# 分别提取出姓名和域名\nmatch2 = re.search(r'([a-zA-Z0-9_-]+)@([a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+)', s)\n\nif match2:\n    print(match2.group()) # 输出 greenlihui@live.com\n    print(match2.group(1)) # 输出 greenlihui\n    print(match2.group(2)) # 输出 live.com\nelse:\n    print(\"match not found\")\n```\n#### findall()  \n前面的 `search()` 方法只能返回第一个匹配模式的字符串，要找到所有匹配的字符串结果就要使用 `findall()` 方法。  \n```python\nimport re\ns = \"My telephone number are 12345-54321 and 23456-65432\"\nmatch = re.findall(r'\\d{5}', s)\n\nif match:\n    print(match) # 输出 ['12345', '54321', '23456', '65432]\n```\n对于 `findall` 也可以使用捕获组，返回的是由**元组**构成的**列表**。\n```python\nimport re\ns = \"My telephone number are 12345-54321 and 23456-65432\"\nmatch = re.findall(r'(\\d{5})-(\\d{5})', s)\n\nprint(match)\n# 输出 [('12345', '54321'), ('23456', '65432')]\n\nfor i in match:\n    print(i)\n    print(\"First group\", i[0])\n    print(\"Second group\", i[1])\n\n# 输出\n# ('12345', '54321')\n# First group 12345\n# Second group 54321\n# ('23456', '65432')\n# First group 23456\n# Second group 65432\n```\n#### match()  \n`match()` 和 `search()` 很接近，区别就是 `match()` 从字符串开头进行匹配；如果在 `search()` 中应用 ^ 表达式，可以获得和 `match()` 相同的效果。\n```python\nimport re\ns = \"python tuts\"\nmatch = re.match(r'py', s)\nif match:\n    print(match.group())\n# 输出 py\n\nmatch2 = re.search(r'^py', s)\nif match2:\n    print(match2.group())\n# 同样输出 py\n```\n### 异常处理\nPython 中异常处理的步骤关键字是 `try-except`，过程一般如下：\n```python\ntry:\n    # 可能产生异常的代码\nexcept <ExceptionType1>:\n    # 异常处理\nexcept <ExceptionType2>:\n    # 异常处理\nexcept:\n    # 异常处理\n```\nPython 中可以用 `else` 或者 `finally` 来控制程序结构，语法格式和 `try` 和 `except` 并列； `else` 中的代码只有在未发生异常时才会执行； `finally` 中的代码无论是否发生异常都会执行。\n#### 抛出异常  \n除了代码出错产生的异常，自己有时候也可以通过 `raise exception`(exception 为异常对象) 制造一些异常。\n#### 捕捉异常\n用 `raise` 抛出异常时可以附带参数，之后在 `except` 时，可以通过 `except Exception as e` 把异常对象保存到变量 e (也可以叫别的)。\n```python\n# 插入身高的程序\nheights = [164, 167, 169, 171]\ndef record_height(index, height):\n    if index >= len(heights):\n        raise IndexError(index)\n    else:\n        heights[index] = height\n\ntry:\n    record_height(5, 185)\nexcept Exception as e:\n    print(\"列表不存在第\", e, \"个元素\")\n```\n#### 自定义异常  \n自定义异常其实就是定义一个类，让其继承自 `Exception`。\n```python\nclass AssignmentError(Exception):\n    def __init__(self, index, height, message):\n        self.index = index\n        self.height = height\n        self.message = message\n\n# 对于定义的 exception 中的三个实例变量，message 用于在控制台输出错误信息，index 和 height 修复列表元素不足的问题，然后尝试重新插入。\n```\n#### 中止重试  \n```python\nheights = [164, 167, 169, 171]\ndef record_height(index, height):\n    if index >= len(heights):\n        raise AssignmentError(index, height, \"\\n遇到异常（不存在该元素，尝试处理\\n\")\n    else:\n        heights[index] = height\n\ntry:\n    record_height(4, 185)\nexcept AssignmentError as e:\n    print(e.message) # 输出上面传入的 message 信息。\n    heights.append(e.height)\n```\n#### 改进  \n额外的一些要求：如果插入的 index 大于 heights 的长度 4，比如在 index 为 6 处插入 180，则 180 和前面就有两个空格，应该在空格处填入 0，得到 heights = [164, 167, 169, 171, 0, 0, 180]\n```python\ntry:\n    record_height(6, 180)\nexcept AssignmentError as e:\n    print(e.message)\n    for index in range(len(heights), e.index):\n        heights.append(0)\n    heights.append(e.height)\n```\n如果还有其他的要求比如原来填过身高的位置不能再覆盖填写等等就靠自己去试着写写吧。","tags":["Python"],"categories":["学习"]},{"title":"Assignment Sample Answer","url":"/2017/06/08/sample-answer/","content":"\n这两周来自 [UWLAX](https://www.uwlax.edu/) 的外教 [Kenny Hunt](http://charity.cs.uwlax.edu/#/) 对我们进行两周的 [Web Programming](http://charity.cs.uwlax.edu/scun/web/) 课程教学,介绍基本语法用法后，布置了一篇作业，下面附上 Sample Answer。\n\n这是作业的原链接 => [JavaScript Assignment](http://charity.cs.uwlax.edu/scun/web/assignments/hw1/)\n\n为防止外教回国后，页面被删除无法访问，我这里把作业存在 [这篇文章](https://greenlihui.github.io/2017/06/08/javascript-assignment/) 里了\n\n## Risk\n```JavaScript\nfunction risk(height, weight, sex) {\n  var meterOfHeight = height * 0.0254;\n  var kiloOfWeight = weight * 0.4536;\n  var bmi = kiloOfWeight / Math.pow(meterOfHeight, 2);\n  return ( sex == 'M' && (bmi < 20.4 || bmi > 31.9) ) ||\n  ( sex == 'F' && (bmi < 19.4 || bmi > 27.6) );\n}\n```\n\n## Hail Caesar\n```JavaScript\nfunction roman(number) {\n  var numberToRoman = {\n    1 : \"I\",\n    2 : \"II\",\n    3 : \"III\",\n    4 : \"IV\",\n    5 : \"V\",\n    6 : \"VI\",\n    7 : \"VII\",\n    8 : \"VIII\",\n    9 : \"IX\",\n    10 : \"X\"\n  };\n  var romanToNumber = {\n    \"I\" : 1,\n    \"II\" : 2,\n    \"III\" : 3,\n    \"IV\" : 4,\n    \"V\" : 5,\n    \"VI\": 6,\n    \"VII\" : 7,\n    \"VIII\" : 8,\n    \"IX\" : 9,\n    \"X\" : 10\n  };\n  if (typeof number == 'number') {\n    return numberToRoman[number];\n  } else if (typeof number == 'string') {\n    return romanToNumber[number.toUpperCase()];\n  } else {\n    return undefined;\n  }\n}\n```\n\n## Follow the Leader\n```JavaScript\nfunction lettersThatFollow(text, ch) {\n  var result = \"\";\n  var phrases = text.split(ch).slice(1);\n\n  phrases.map(ph => ph[0]).forEach(c => {\n    if ( c && result.indexOf(c) < 0 ) {\n      result += c;\n    }\n  });\n  return result;\n}\n```\n\n## Props to JavaScript\n```JavaScript\nfunction props(list, propertyName) {\n  return list.map(val => val[propertyName]);\n}\n```\n\n## JavaScript to HTML\n```JavaScript\nfunction toHTML(list) {\n  if (typeof list != 'object') {\n    return \"<li>\" + list + \"</li>\";\n  } else {\n    return \"<ol>\" + list.map(toHTML).join('') + \"</ol>\";\n  }\n}\n```\n\n## One Step After The Other\n```JavaScript\nfunction sequence(start, step) {\n  var count = 0;\n\n  return function() {\n    return start + step * count++;\n  };\n}\n```\n\n## Over and Over Again\n```JavaScript\nfunction repeat(text, n) {\n  return repeatf(() => text, n).join('');\n}\n```\n\n## Over and Over Again and Again\n```JavaScript\nfunction repeatf(f, n) {\n  var result =[];\n  for (var i = 0; i < n; i++) {\n    result.push(f());\n  }\n  return result;\n}\n```\n\n## The Matchmaker\n```JavaScript\nfunction matchmaker(obj) {\n  return function (object) {\n    for (var key in obj) {\n      if (obj[key] != object[Key]) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n```\n\n## Breaking Up is Hard To Do\n```JavaScript\nfunction breakup(list, partitioner) {\n  var result = {};\n  list.forEach(val => {\n    var key = partitioner(val);\n    if (! result.hasOwnProperty[key]) {\n      result[key] = [];\n    }\n    result[key].push(val);\n  });\n  return result;\n}\n```\n\n## All For One and One For All\n```JavaScript\nfunction eachOne(list) {\n  for (var i = 0; i < liset.length; i++) {\n    if (!list[i]) {\n      return list[i];\n    }\n  }\n  return true;\n}\n```\n\n## NoSql Query\n```JavaScript\nfunction noSql(list, query) {\n  return list.filter(matchmaker(query));\n}\n```\n\n## Once and Only Once\n```JavaScript\nfunction justOnce(f) {\n  var hasBeenCalled = false;\n  var value;\n\n  return function() {\n    if(hasBeenCalled) {\n      return value;\n    } else {\n      value = f();\n      hasBeenCalled = true;\n      return value;\n    }\n  };\n}\n```\n\n## 我的打分\n上面是老师评讲题目后给出的参考答案，我原本提交的答案只拿了一个 AB\n这是老师给我的打分\n> Here are my notes on your assignment: \n> <br>\n> 1\\) the code is well written\n> 2\\) You have a couple of variables named \"Key\".  Never start a variable name with a capital letter.\n> 3\\) The breakup function is almost correct. You need to be carful about truthiness - in this case it is a problem with \"result[key] ? ...\".  Try result.hasOwnProperty(key) ?  \n> <br>\n> Score: 90% (the justOnce function is not given) This is an \"AB\".\n\n## 文件\n[我提交的作业](/assets/my-homework.js) 和 [老师的答案](/assets/sample%20answer.js)\n","tags":["UWLAX","JavaScript"],"categories":["学习"]},{"title":"JavaScript Assignment","url":"/2017/06/08/javascript-assignment/","content":"\n# 来自外教的 JavaScript 作业\n[原作业网址](http://charity.cs.uwlax.edu/scun/web/assignments/hw1/)\n\n## Overview\nIn this assignment you will write several JavaScript functions. These function require that you use most aspects of the language; conditionals, loops, arrays, strings and functions-as-first-class citizens. Each of the functions must be placed within a single file named homework1.js which is the only deliverable for this assignment.\n\n### Risk\n`risk(height, wieght, sex)`\n\nThis function accepts three inputs. The first input is a number that denotes the height (in inches) of a person. The second input is a number that denotes the weight of a person (in pounds). The third input is a string that denotes the sex of a person. The sex is “M” for male and “F” for female. This function returns true if the person is at risk and false if they are not. A person is at risk if\n<!-- more -->\n- they are male and have a BMI less than 20.4 or greather than 31.9\n- they are female and have a BMI less than 19.4 or greather than 27.6\n\nBody Mass Index (BMI) is defined as a persons weight (in kilograms) divided by the square of their height (in meters).\n\n**Examples**\n- risk(71.5, 175.3, 'M') => false\n- risk(65.2, 230.5, 'M') => true\n- risk(65.2, 110, 'F') => true\n\n### Hail Caesar\n`roman(number)`\n\nThis function accepts a single input. The input is either a number or a String. If it is a number, it is a base-10 number in the interval [1, 10]. If it is a String, it is a case-insensitive roman-numeral in the interval [1, 10]. If the input is a Number, in [1, 10], the function returns the corresponding Roman numeral as a String. If the input is a roman-numeral String in the interval [1, 10], then the function returns the corresponding decimal number. This function returns undefined for all other usages.\nStatue of Caesar\n\n**Examples**\n- roman('VII') => 7\n- roman('vIi') => 7\n- roman( 9 ) => 'IX'\n- roman( 128 ) => undefined\n- roman( 'Hello' ) => undefined\n- roman( roman ) => undefined\n\n### Follow the Leader\n`lettersThatFollow( text, ch )`\n\nThis function accepts two strings: a string named text and a string name ch. The function must search through the text for all occurrences of ch in text and, for each occurrence of ch, return the character that immediately follows ch in text if such a character exists. The order of the characters in the output string is undefined. The result must be a string that contains no duplicate characters.\n\n**Examples**\n- lettersThatFollow(\"I nearly laughed when the fat man sat on his hat.\", \"a\") => \"rutn\"\n- lettersThatFollow(\"I nearly laughed when the fat man sat on his hat.\", \"z\") => \"\"\n- lettersThatFollow(\"I nearly laughed when the fat man sat on his hat.\", \".\") => \"\"\n\n### Props to JavaScript\n`props( list, propertyName)`\n\nThis function takes a list of elements and a propertyName string as input. The function returns a list that is generated by obtaining the property-named value of an input element. If a list element doesn't have a property of the specified name, then its value is given as undefined.\n\n**Examples**\n- var testing = [{ a:3, b:‘Cat’, c:true }, 13, { a:12, b:‘Hat’, c:false }, { cat:3, hat:‘3’, rat:false } ];\n- props( testing, ‘b’ ) => [ ‘Cat’, undefined, ‘Hat’, undefined ]\n- props( testing, ‘a’ ) => [3, undefined, 12, undefined ]\n- props( testing, ‘cat’ ) => [undefined, undefined, undefined, 3 ]\n\n### JavaScript to HTML\n`toHTML( list )`\n\nThis function takes an array of elements as its only input. The function converts the input list into a valid HTML ordered list. If any element of the list is a list, the output is a nested list of elements such that the first element of the inner list is an item in the outer list and every other element is within the nested list.\n\n**Examples**\n- toHTML( [] ) =&gt; '&lt;ol&gt;&lt;/ol&gt;'\n- toHTML( [1, 2] ) =&gt; '&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ol&gt;'\n- toHTML( [1, 2, [3, 4, 5], 6] ) =&gt;\n\"&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;ol&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;/ol&gt;\"\n\n### One Step After The Other\n`sequence( start, step )`\n\nThis function takes two numeric inputs, start and stop, and returns a function of no inputs. The resulting function will generate a sequence of values beginning with start and offset by step Each function call will generate the next value in the sequence.\n\n**Examples**\n- var x = sequence( 3, 15 );\n- [ x(), x(), x() ] => [ 3, 18, 33 ]\n- var y = sequence( 28, -5 );\n- [ y(), y(), y() ] => [ 28, 23, 18 ]\n\n### Over and Over Again\n`repeat( text, n )`\n\nThis function accepts a string (text) and an integer number (n). The function must return a string that has n repetitions of text. If n is non-positive this function must return the empty string.\n\n**Examples**\n- repeat( \"cow\", 3 ) => \"cowcowcow\"\n- repeat( \"alf\", 10 ) => \"alfalfalfalfalfalfalfalfalfalf\"\n- repeat( \"repeat\", -3 ) => \"\"\n\n### Over and Over Again and Again\n`repeatf( f, n )`\n\nThis function accepts a function of no arguments ( f ) and an integer number ( n ). The function must return a list that contains the results of n executions of f. If n is non-positive this function must return the empty list.\n\n**Examples**\n- repeatf( () => { return \"cow\"; } , 3 ) => [ \"cow\", \"cow\", \"cow\" ]\n- repeatf( function() { return 3; }, 2 ) => [ 3, 3 ]\n- repeatf( sequence( 3, 15 ), 3 ) => [ 3, 18, 33 ]\n\n### The Matchmaker\n`matchmaker( obj )`\n\nThis function accepts an object (obj) and returns a predicate function. The predicate function accepts a single input and returns true if the input contains all of the key/value properties of obj.\n\n**Examples**\n- var m = matchmaker( { a : 'b', c : 3 } );\n- m( { a : 'b', c : 3, d : true } ) => true\n- m( { a : 'b', c : 4, d : true } ) => false\n- m( 328 ) => false\n\n### Breaking Up is Hard To Do\n`breakup( list , partitioner )`\n\nThis function accepts two inputs: a list of elements and a function that accepts an element from the list. The result is an object whose properties correspond to the items returned by the partitioner and whose values are lists of elements that generated that property.\n\n**Examples**\n- breakup( [ 1, 2, 3, 5, 6, 7 ], (x) => { return x % 2 == 0; } ) => { true:[ 2, 6 ], false:[ 1, 3, 5, 7 ] }\n- breakup( [ 1.3, 5.1, 1.1, 4.3, 5.5 ], Math.floor ) => { 1:[ 1.3, 1.1 ], 4:[ 4.3 ], 5:[ 5.1, 5.5 ] }\n-  breakup( [“cat”, “bat”, “rat”, “horse”, “pony”], function(s) { return s.length; } ) => { 3:[“cat”, “bat”, “rat”], 4:[“pony”], 5:[“horse”] }\n\n### All For One and One For All\n`eachOne( list )`\n\nThis function accepts a list of elements as it’s only input. The method returns ‘true’ if every element in the list is truthy; otherwise it returns the first falsey element.\n\n**Examples**\n- eachOne( [ 0, 1, 2, 3 ] ) => 0\n- eachOne( [ 1, 2, 3, 4 ] ) => true\n- eachOne( [ 'a', [], 3, '', null ] ) => ''\n\n### NoSql Query\n`noSql( list, query )`\n\nThis function accepts a list of elements and an object known as the query. The method returns a list of all elements that have each of the key/value properties of the query.\n\n**Examples**\n- var objects = [ { public : true, name : \"Lion King\" }, { public : true, name : 'Dumbo' }, { public : false, name : 'Lion King' }, { name : 'Xeon', rating : 5 } ];\n- noSql( objects, { public:true } ) => [ { public:true, name:'Lion King' }, { public:true, name:'Dumbo'}]\n- noSql( objects, { name:'Lion King' } ) => [ { public:true, name:'Lion King' }, { public:false, name:'Lion King'}]\n- noSql( objects, { rating:5 } ) => [ { name:'Xeon', rating:5 } ]\n- noSql( objects, { public:false, name:'Dumbo' } ) => [ ]\n\n### Once and Only Once\n`justOnce( f )`\n\nThis function accepts a function ‘f’ as input and creates a version of the function that can only be called one time. Repeated calls to the resulting function will return the value from the original call.\n\n**Examples**\n- var a = justOnce( Math.max );\n- a( 3, 12 ) => 12\n- a( 51, -2) => 12\n- a( 6 ) => 12\n- a( ) => 12\n- var b = justOnce( function() { return new Date(); } );\n- b( ) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n- b( ) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n- b( 33 ) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n- b( “a”, “b”, “c”) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n","tags":["UWLAX","JavaScript"],"categories":["学习"]}]